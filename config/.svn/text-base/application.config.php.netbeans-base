<?php
//$env = getenv('APPLICATION_ENV') ?: 'production';
$env = getenv('APPLICATION_ENV') ?: 'development';
return array(
    // This should be an array of module namespaces used in the application.
    'modules' => array(

         //zf-apigility modules
        'ZF\\DevelopmentMode',
        'ZF\\Apigility',
        'ZF\\Apigility\\Provider',
        'ZF\\Apigility\\Documentation',
        'AssetManager',
        'ZF\\ApiProblem',
        'ZF\\Configuration',
        'ZF\\MvcAuth',
        'ZF\\OAuth2',
        'ZF\\Hal',
        'ZF\\ContentNegotiation',
        'ZF\\ContentValidation',
        'ZF\\Rest',
        'ZF\\Rpc',
        'ZF\\Versioning',
        'ZFTool',
        'ZF\\Apigility\\Admin',
        'ZF\\Apigility\\Welcome',
        'Application',
        'Lcms',
        'User',

    	'Webpages',
    		//'Southafrica',
    		'Website',
    	//	'SchoolLms',
    		'ScnSocialAuth',
    		'ScnSocialAuthDoctrineORM',
    		'Assessment', 
    		'Package',
    		'Psychometric',
    		'Admin' ,
    		'Testimonial',
    		'Api',
    		'Schedule' ,
    		'Reportdata',
    		'Scheduledata', 
    		'Notification',
    		'UsersACL',

            //'Website',
          //  'SchoolLms',
            'Webpages',
            //'Southafrica',
        'ScnSocialAuth',
        'ScnSocialAuthDoctrineORM',
        'Assessment', 
        'Package',
        'Psychometric',
        'Admin' ,
        'Testimonial',
        'Api',
        'Schedule' ,
        'Reportdata',
        'Scheduledata', 
        'Notification',
        'UsersACL',

                'Lcms','Mis',
        'Lms','Common','Search','Curriculum',
        'Webpackage','Mcq','Report','Sitemap',//'StrokerCache',
        'Dealer','Lcms',
//        'ZendDeveloperTools',
	
        'DoctrineModule',
    	'DoctrineORMModule', 'ZfcUser', 'ZfcBase', 'ZfcUserDoctrineORM', 'Assess'
//        'Aws',
//        'CdnLight'
		
    ),
    // These are various options for the listeners attached to the ModuleManager
    'module_listener_options' => array(
        // This should be an array of paths in which modules reside.
        // If a string key is provided, the listener will consider that a module
        // namespace, the value of that key the specific path to that module's
        // Module class.
        'module_paths' => array(
            './module',
            './vendor',
        ),
        // An array of paths from which to glob configuration files after
        // modules are loaded. These effectively override configuration
        // provided by modules themselves. Paths may use GLOB_BRACE notation.
        'config_glob_paths' => array(
            sprintf('config/autoload/{,*.}{global,%s,local}.php', $env)
        ),
    // Whether or not to enable a configuration cache.
    // If enabled, the merged configuration will be cached and used in
    // subsequent requests.
//    'config_cache_enabled' => true,
    // The key used to create the configuration cache file name.
    //'config_cache_key' => $stringKey,
    // Whether or not to enable a module class map cache.
    // If enabled, creates a module class map cache which will be used
    // by in future requests, to reduce the autoloading process.
//    'module_map_cache_enabled' => true,
    // The key used to create the class map cache file name.
    //'module_map_cache_key' => $stringKey,
    // The path in which to cache merged configuration.
//    'cache_dir' => 'data/cache',
    // Whether or not to enable modules dependency checking.
    // Enabled by default, prevents usage of modules that depend on other modules
    // that weren't loaded.
    // 'check_dependencies' => true,
    ),
        // Used to create an own service manager. May contain one or more child arrays.
        //'service_listener_options' => array(
        //     array(
        //         'service_manager' => $stringServiceManagerName,
        //         'config_key'      => $stringConfigKey,
        //         'interface'       => $stringOptionalInterface,
        //         'method'          => $stringRequiredMethodName,
        //     ),
        // )
        // Initial configuration with which to seed the ServiceManager.
        // Should be compatible with Zend\ServiceManager\Config.
        // 'service_manager' => array(),
);
