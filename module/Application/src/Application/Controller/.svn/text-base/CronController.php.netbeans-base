<?php

/**
 * Zend Framework (http://framework.zend.com/)
 *
 * @link      http://github.com/zendframework/ZendSkeletonApplication for the canonical source repository
 * @copyright Copyright (c) 2005-2013 Zend Technologies USA Inc. (http://www.zend.com)
 * @license   http://framework.zend.com/license/new-bsd New BSD License
 */

namespace Application\Controller;

use Zend\Session\SaveHandler\Cache;
use Zend\Form\Form;
use Predis\Client;
use Zend\Mvc\Controller\AbstractActionController;
use Zend\Stdlib\ResponseInterface as Response;
use Zend\Stdlib\Parameters;
use Zend\View\Model\ViewModel;
use Zend\Authentication\AuthenticationService;
use SanAuthWithDbSaveHandler\Storage\IdentityManagerInterface;
use Zend\View\Model\JsonModel;
//use ZfcUser\Model\TuserTable;
//use ZfcUser\Model\Tuser;
//use ZfcUser\Model\Torders;
//use ZfcUser\Model\TordersTable;
use Zend\Cache\StorageFactory;

//use ZfcUser\Model\Tconfig;
//use ZfcUser\Model\TconfigTable;

class CronController extends AbstractActionController {

    public function runCronEmailAction() {
        
        $id = $this->params()->fromRoute('id', 0);
        if($id == "dailyBounceEmailApi"){
            $this->dailybounceemailapifunction();
            die;
        }
        if($id == "misReportToManagement"){
            $this->misreporttomanagementfunction();
            die;
        }
        if($id == "sendExpiryReminders"){
            $this->sendExpiryRemindersfunction();
            die;
        }
        if($id == "sendExpirySms"){
            $this->sendExpirySms();
            die;
        }
        
        $configtable = $this->getServiceLocator()->get('Package\Model\TconfigTable');

        $configval = $configtable->GetValueByConfigKey('MAXLIMIT');
        $maxlimit = $configval->config_value;

        if ($maxlimit > 0) {
            $id = $this->params()->fromRoute('id', 0);
            if ($id == '0') {
                $emailType = "registration";
            } else {
                $emailType = $id;
            }
            $mailContentTable = $this->getServiceLocator()->get('Package\Model\TmailContent');
            $emailContent = $mailContentTable->getEmailContent($emailType);

            $ids = array();
            $count = 0;
            foreach ($emailContent as $content) {
               
                if ($maxlimit == $count) {
                    echo "limit over";
                    break;
                } else {
                    $to = $content->email_id;
                    $subject = $content->subject;
                    $message = $content->message;
                    $attachmentDetails = $content->mail_attachment;
                    $filename = '';
                    $uploadDirectory = "";
                    if (!is_null($attachmentDetails) && $attachmentDetails != '') {
                        
                        $attachment_array = explode("/", $attachmentDetails);

                       $filename = $attachment_array[count($attachment_array) - 1];
                        array_pop($attachment_array);
                        $uploadDirectory = implode("/", $attachment_array);
                        $uploadDirectory=explode(',',$uploadDirectory);
                    }
                    
                    $config = $this->getServiceLocator()->get('config');
                    $mailConfig = $config['mail_config'];
                    if (sendMail($to, $subject, $message, '', '', '','', $uploadDirectory, $filename,$mailConfig)) {
                    //if (sendMail($to, $subject, $message)) {
                        $ids[] = $content->id;
                        $mailContentTable->deleteEmailContentByIds($content->id);
                        $count++;
                    }
                }
            }
            $remain_limit = $maxlimit - $count;
            $configtable->updateconfig($remain_limit, 'MAXLIMIT');
        } else {
            echo "You have no limit for send mail";
        }
        if (count($ids)) {
            $mailContentTable->deleteEmailContentByIds($ids);
            echo '<meta http-equiv="refresh" content="30" />Mail sent successfully';
        }else {
            echo '<meta http-equiv="refresh" content="120" />Mail queue finished.';
        }
        exit;
    }
    
    public function automailAction() {
        $userTable = $this->getServiceLocator()->get('Assessment\Model\UserTable');
        $table = $this->getServiceLocator()->get('Assessment\Model\TstudentandmentorTable');
        $mailContentTable = $this->getServiceLocator()->get('Package\Model\TmailContent');
        
        $event = $this->getEvent();
        $requestURL = $event->getRequest();
        $router = $event->getRouter();
        $uri = $router->getRequestUri();
        $baseUrl = sprintf('%s://%s%s', $uri->getScheme(), $uri->getHost(), $requestURL->getBaseUrl());
        
        $prevforthday = date('Y-m-d', strtotime('-4 days'));
        $weeklyday = date('Y-m-d', strtotime('-7 days'));
        $yesterday = date('Y-m-d', strtotime('-1 day'));
        
        $fourthUserRowSet = $userTable->getuserdetailsByRegisteredDate($prevforthday);
        $weeklydayUserRowSet = $userTable->getuserdetailsByRegisteredDate($weeklyday);
        $yesterdayUserRowSet = $userTable->getuserdetailsByRegisteredDate($yesterday);
        
        foreach($fourthUserRowSet as $effectUserRow) {
            $activementorMessage='';
            $filepath = __DIR__ . '../../../../view/mailer/';
            //if($effectUserRow->user_type_id==2 || $effectUserRow->user_type_id==1) { continue; }
            if($effectUserRow->user_type_id==1) {
                $filepath = $filepath.'studenteffectiveuse.html';
                $activementorsubject='Student Effective Use';
            } else  if($effectUserRow->user_type_id==2) {
                $filepath = $filepath.'parenteffectiveuse.html';
                $activementorsubject='Parent Effective Use';
            } else if($effectUserRow->user_type_id==3) {
                $filepath = $filepath.'mentoreffectiveuse.html';
                $activementorsubject='Mentor Effective Use';
            }
            $userName = $effectUserRow->firstName;
            $to = $effectUserRow->emailId;
            $activementorMessage = file_get_contents($filepath);
            $activementorMessage = str_replace("{USER_NAME}", "$userName", $activementorMessage);
            //$activementorMessage = str_replace("<TYPE>", "$typeofUser", $activementorMessage);
            $activementorMessage = str_replace("{SITE_URL}", $baseUrl, $activementorMessage);
            $activementorMessage = str_replace("{BASE_URL}", $baseUrl, $activementorMessage);
            //echo $activementorMessage; exit;
            $emailData = array("email_id" => $to, 'subject' => $activementorsubject, 'message' => $activementorMessage, 'mail_type' => 'useractivities', 'status' => 1);
            $mailContentTable->addEmailContent($emailData);
        }
        
        foreach($weeklydayUserRowSet as $weeklydayUserRow) {
            $activementorMessage='';
            $filepath = __DIR__ . '../../../../view/mailer/';
            //if($weeklydayUserRow->user_type_id==1 || $weeklydayUserRow->user_type_id==2) { continue; }
            if($weeklydayUserRow->user_type_id==1) {
                $filepath = $filepath.'studentreminder.html';
                $activementorsubject='Student Reminder';
            } else  if($weeklydayUserRow->user_type_id==2) {
                $filepath = $filepath.'parentreminder.html';
                $activementorsubject='Parent Reminder';
            } else if($weeklydayUserRow->user_type_id==3) {
                $filepath = $filepath.'mentorreminder.html';
                $activementorsubject='Mentor Reminder';
            }
            $userName = $weeklydayUserRow->firstName;
            $to = $weeklydayUserRow->emailId;
            //$to = 'baljeet.singh@extramarks.com';
            $activementorMessage = file_get_contents($filepath);
            $activementorMessage = str_replace("{USER_NAME}", "$userName", $activementorMessage);
            //$activementorMessage = str_replace("<TYPE>", "$typeofUser", $activementorMessage);
            $activementorMessage = str_replace("{SITE_URL}", $baseUrl, $activementorMessage);
            $activementorMessage = str_replace("{BASE_URL}", $baseUrl, $activementorMessage);
            //echo $activementorMessage; exit;
            
            $emailData = array("email_id" => $to, 'subject' => $activementorsubject, 'message' => $activementorMessage, 'mail_type' => 'useractivities', 'status' => 1);
            $mailContentTable->addEmailContent($emailData);
        }
        
        foreach($yesterdayUserRowSet as $yesterdayUserRow) {
            $activementorMessage='';
            $filepath = __DIR__ . '../../../../view/mailer/';
            //if($yesterdayUserRow->user_type_id==1 || $yesterdayUserRow->user_type_id==2) { continue; }
            if($yesterdayUserRow->user_type_id==1) {
                $filepath = $filepath.'feature-mail-student.html';
                $activementorsubject='Student Feature Mail';
            } else  if($yesterdayUserRow->user_type_id==2) {
                $filepath = $filepath.'feature-mail-parent.html';
                $activementorsubject='Parent Feature Mail';
            } else if($yesterdayUserRow->user_type_id==3) {
                $filepath = $filepath.'feature-mail-mentor.html';
                $activementorsubject='Mentor Feature Mail';
            }
            $userName = $yesterdayUserRow->firstName;
            $to = $yesterdayUserRow->emailId;
            //$to = 'baljeet.singh@extramarks.com';
            $activementorMessage = file_get_contents($filepath);
            $activementorMessage = str_replace("{USER_NAME}", "$userName", $activementorMessage);
            //$activementorMessage = str_replace("<TYPE>", "$typeofUser", $activementorMessage);
            $activementorMessage = str_replace("{SITE_URL}", $baseUrl, $activementorMessage);
            $activementorMessage = str_replace("{BASE_URL}", $baseUrl, $activementorMessage);
            //echo $activementorMessage; exit;
            
            $emailData = array("email_id" => $to, 'subject' => $activementorsubject, 'message' => $activementorMessage, 'mail_type' => 'useractivities', 'status' => 1);
            $mailContentTable->addEmailContent($emailData);
        }
        echo 'Email Sent Successfully'; exit;
    }
    
    public function falconideapiAction() { 
        $transId = $_REQUEST['TRANSID'];
        $response = $_REQUEST['RESPONSE'];
        $event = $_REQUEST['EVENT'];
        $rcptId = $_REQUEST['RCPTID'];
        $email = $_REQUEST['EMAIL'];
        $timestamp = $_REQUEST['TIMESTAMP'];
        $valueDump = "TRANSID: ".$transId.", RESPONSE: ".$response." ,EVENT: ".$event." ,RCPTID: ".$rcptId.", EMAIL: ".$email." ,TIMESTAMP: ".$timestamp;
                      
        $tableuser = $this->getServiceLocator()->get('Assessment\Model\UserTable');
        
        
        if($event == 'unsubscribed'){
            $tableuser->updateSubscribeEmail($email);
        }else{
            if($event == "opened"){
                $tableuser->updateBounceEmailVaild($email);
            }else if($event == "bounced" || $event == "abuse" || $event == "dropped" || $event == "invalid"){
                $tableuser->updateBounceEmail($email);
            }
        }
        $logsTable = $this->serviceLocator->get('Assessment\Model\AdminLogDetailsTable');   
        
        $zfcuserMapperObj = $this->getServiceLocator()->get("zfcuser_user_mapper");
        
        $emailData = $zfcuserMapperObj->findByEmail($email);
        if(is_object($emailData) && count($emailData) > 0){
            $loginId = $emailData->getId();       
        }
                
        $params['created_date'] = date('Y-m-d h:i:s');
        $params['value'] = $valueDump;
        $params['login_id'] = $loginId;
        $params['key_name'] = "falconideapi";
        $params['modified_table'] = "user";
        $params['modified_primary_id'] = $loginId;
        $logsTable->addpackageLogs($params);   
        die();
    }
    
    /*
     * Daily Cron function for executing bounce Email API
     */
    public function dailybounceemailapifunction(){
        $config = $this->getServiceLocator()->get('config');
        $emailBounceCron = $config['email_bounce'];
        if($emailBounceCron['daily_cron_flag']){
            // Email Bounce/Block/Invalid functionalities. APIs from SendGrid Web
            $this->apiCall('bounce',$emailBounceCron);
            $this->apiCall('block',$emailBounceCron);
            $this->apiCall('invalid',$emailBounceCron);
            $this->apiCall('unsubscribe',$emailBounceCron);
            die('Daily Cron for Invalid/Unsubscribe Email executed');
        }else{
            die('Daily Cron Flag not set');
        }
        
    }
    
    private function apiCall($param,$emailBounceCron){
        $zfcuserMapperObj = $this->getServiceLocator()->get("zfcuser_user_mapper");
        $tableuser = $this->getServiceLocator()->get('Assessment\Model\UserTable');
        
        if($param == 'bounce')
            $url = "https://api.sendgrid.com/api/bounces.get.json?api_user=".$emailBounceCron['api_user']."&api_key=".$emailBounceCron['api_password']."&days=2";
        else if($param == 'block')
            $url = "https://api.sendgrid.com/api/blocks.get.json?api_user=".$emailBounceCron['api_user']."&api_key=".$emailBounceCron['api_password']."&days=2";
        else if($param == 'invalid')
            $url = "https://api.sendgrid.com/api/invalidemails.get.json?api_user=".$emailBounceCron['api_user']."&api_key=".$emailBounceCron['api_password']."&days=2";
        else if ($param == 'unsubscribe')
            $url = "https://api.sendgrid.com/api/unsubscribes.get.json?api_user=".$emailBounceCron['api_user']."&api_key=".$emailBounceCron['api_password']."&days=2";
        
        $dataJson = file_get_contents($url);
        $decodeData = json_decode($dataJson);
        
        if ($param != 'unsubscribe'){
            foreach($decodeData as $key=>$val){
                $emailData = $zfcuserMapperObj->findByEmail($val->email);
                if(is_object($emailData) && count($emailData) > 0){
                    if($emailData->getValidEmail() != '5'){
                        $tableuser->updateBounceEmail($val->email);
                    }
                }
            }
        }else if ($param == 'unsubscribe'){
            foreach($decodeData as $key=>$val){
                $emailData = $zfcuserMapperObj->findByEmail($val->email);
                if(is_object($emailData) && count($emailData) > 0){
                    if($emailData->getSubscribeMe() !='n'){
                        $tableuser->updateSubscribeEmail($val->email);
                    }
                }
            }
        }
    }
    
    public function misreporttomanagementfunction(){
        
        //ini_set('display_errors', E_ALL);
        $currentDate = date('d-m-Y');
        $createdDate = date('d-m-Y', strtotime('-1 day', strtotime($currentDate)));
        //$createdDate = date('d-m-Y', strtotime($currentDate));
        
        $createdDate = date('Y-m-d', strtotime($createdDate));
        $table = $this->getServiceLocator()->get('Assessment\Model\UserTable');
        $totalRegistration = $table->getRegisteredUserByDate($createdDate);
        
        $params['fromDate'] = $createdDate;
        $params['toDate'] = $createdDate;
        $params['pkg_payment_details'] = "Processed";
        $usersData = $table->getSubscriptionData($params);
        
        
        $totalSale = 0;$totalINRSale = 0;$totalUSDSale=0;$totalSGDSale=0;
        $totalSubscriptions = 0;$totalINRSubscriptions = 0;$totalUSDSubscriptions=0;$totalSGDSubscriptions=0;
        $totalINROfflineSale = 0;$totalINROfflineSubscriptions=0;$totalINROnlineSale=0;$totalINROnlineSubscriptions=0;
        $totalUSDOfflineSale = 0;$totalUSDOfflineSubscriptions=0;$totalUSDOnlineSale=0;$totalUSDOnlineSubscriptions=0;
        $totalSGDOfflineSale=0;$totalSGDOfflineSubscriptions=0;$totalSGDOnlineSale=0;$totalSGDOnlineSubscriptions=0;
        $totalSubscribedPackage = 0; 
        $totalSubscribedStudy = 0; $totalStudySale = 0; $totalSubscribedINRStudy = 0; $totalSubscribedUSDStudy = 0; $totalSubscribedSGDStudy = 0; $totalINRStudy = 0; $totalUSDStudy = 0; $totalSGDStudy = 0;
        $totalSubscribedTablet = 0; $totalTabletSale = 0; $totalSubscribedINRTablet = 0; $totalSubscribedUSDTablet = 0; $totalSubscribedSGDTablet = 0; $totalINRTablet = 0; $totalUSDTablet = 0; $totalSGDTablet = 0;
        $totalSubscribedSDcard = 0; $totalSDcardSale = 0; $totalSubscribedINRSDcard = 0; $totalSubscribedUSDSDcard = 0; $totalSubscribedSGDSDcard = 0; $totalINRSDcard = 0; $totalUSDSDcard = 0; $totalSGDSDcard = 0;
        foreach($usersData as $data) { 
           //echo "<pre>"; print_r($data); 
           //echo $data->coupon_type;
           if($data->coupon_type != 'test' && $data->coupon_type != 'demo'){
               
               $totalSale+= $data->paid_price;
               $totalSubscriptions++;
               if($data->currency_type == 'INR'){
                   $totalINRSale+= $data->paid_price;
                   $totalINRSubscriptions++;
                   if($data->pkg_payment_type == 'offline'){
                       $totalINROfflineSale+= $data->paid_price;
                       $totalINROfflineSubscriptions++;
                   }
                   
                   if($data->pkg_payment_type != 'offline'){
                       $totalINROnlineSale+= $data->paid_price;
                       $totalINROnlineSubscriptions++;
                   }
                   
                   if($data->package_type == 'study'){
                       $totalINRStudy+= $data->paid_price;
                       $totalSubscribedINRStudy++;
                   }
                   
                   if($data->package_type == 'tablet'){
                       $totalINRTablet+= $data->paid_price;
                       $totalSubscribedINRTablet++;
                   }
                   
                   if($data->package_type == 'sdcard'){
                       $totalINRSDcard+= $data->paid_price;
                       $totalSubscribedINRSDcard++;
                   }
               }
               if($data->currency_type == 'USD'){
                   $totalUSDSale+= $data->paid_price;
                   $totalUSDSubscriptions++;
                   if($data->pkg_payment_type == 'offline'){
                       $totalUSDOfflineSale+= $data->paid_price;
                       $totalUSDOfflineSubscriptions++;
                   } 
                   
                   if($data->pkg_payment_type != 'offline'){
                       $totalUSDOnlineSale+= $data->paid_price;
                       $totalUSDOnlineSubscriptions++;
                   }
                   
                   if($data->package_type == 'study'){
                       $totalUSDStudy+= $data->paid_price;
                       $totalSubscribedUSDStudy++;
                   } 
                   
                   if($data->package_type == 'tablet'){
                       $totalUSDTablet+= $data->paid_price;
                       $totalSubscribedUSDTablet++;
                   } 
                   
                   if($data->package_type == 'sdcard'){
                       $totalUSDSDcard+= $data->paid_price;
                       $totalSubscribedUSDSDcard++;
                   } 
                   
                   
               }
               if($data->currency_type == 'SGD'){
                   $totalSGDSale+= $data->paid_price;
                   $totalSGDSubscriptions++;
                   if($data->pkg_payment_type == 'offline'){
                       $totalSGDOfflineSale+= $data->paid_price;
                       $totalSGDOfflineSubscriptions++;
                   }
                   
                   if($data->pkg_payment_type != 'offline'){
                       $totalSGDOnlineSale+= $data->paid_price;
                       $totalSGDOnlineSubscriptions++;
                   }
                   
                   if($data->package_type == 'study'){
                       $totalSGDStudy+= $data->paid_price;
                       $totalSubscribedSGDStudy++;
                   }
                   
                   if($data->package_type == 'tablet'){
                       $totalSGDTablet+= $data->paid_price;
                       $totalSubscribedSGDTablet++;
                   }
                   
                   if($data->package_type == 'sdcard'){
                       $totalSGDSDcard+= $data->paid_price;
                       $totalSubscribedSGDSDcard++;
                   }                
                   
               }
            
           }
        }
        $totalOnlineSubscribtions = $totalINROnlineSubscriptions + $totalUSDOnlineSubscriptions + $totalSGDOnlineSubscriptions;
        $totalOnlineSale = $totalINROnlineSale + $totalUSDOnlineSale + $totalSGDOnlineSale;
        
        $totalOfflineSubscribtions = $totalINROfflineSubscriptions + $totalUSDOfflineSubscriptions + $totalSGDOfflineSubscriptions;
        $totalOfflineSale = $totalINROfflineSale + $totalUSDOfflineSale + $totalSGDOfflineSale;
        
        $totalSubscribedStudy = $totalSubscribedINRStudy + $totalSubscribedUSDStudy + $totalSubscribedSGDStudy;
        $totalStudySale = $totalINRStudy + $totalUSDStudy + $totalSGDStudy;
        
        $totalSubscribedTablet = $totalSubscribedINRTablet + $totalSubscribedUSDTablet + $totalSubscribedSGDTablet;
        $totalTabletSale = $totalINRTablet + $totalUSDTablet + $totalSGDTablet;
        
        $totalSubscribedSDcard = $totalSubscribedINRSDcard + $totalSubscribedUSDSDcard + $totalSubscribedSGDStudy;
        $totalSDcardSale = $totalINRSDcard + $totalUSDSDcard + $totalSGDSDcard;
       
        $filepath= __DIR__ . '../../../../../Admin/view/mailer/';
        $filepath = $filepath.'misreporttoadmin.html';
                
        $file_content = file_get_contents($filepath);
        
        $totalReg = $totalRegistration['student_cnt'] + $totalRegistration['parent_cnt'] + $totalRegistration['mentor_cnt'];
        
        $socialReg = ($totalRegistration['facebook_cnt'] + $totalRegistration['google_cnt'] + $totalRegistration['twitter_cnt']) ;
        $directReg = ($totalReg) - ($socialReg) ;
        
        
        $regMessage = str_replace('{TOTAL_REG}', $totalReg, $file_content);
        $regMessage = str_replace('{REG_DATE}', date('d F, Y', strtotime('-1 day', strtotime($currentDate))), $regMessage);
        $regMessage = str_replace('{STUDENT_REG}', $totalRegistration['student_cnt'], $regMessage);
        $regMessage = str_replace('{PARENT_REG}', $totalRegistration['parent_cnt'], $regMessage);
        $regMessage = str_replace('{MENTOR_REG}', $totalRegistration['mentor_cnt'], $regMessage);
        $regMessage = str_replace('{SOCIAL_REG}', $socialReg, $regMessage);
        $regMessage = str_replace('{FACEBOOK_REG}', $totalRegistration['facebook_cnt'], $regMessage);
        $regMessage = str_replace('{GOOGLE_REG}', $totalRegistration['google_cnt'], $regMessage);
        $regMessage = str_replace('{TWITTER_REG}', $totalRegistration['twitter_cnt'], $regMessage);
        $regMessage = str_replace('{DIRECT_REG}', $directReg, $regMessage);
        
        //$regMessage = str_replace('{TOTAL_SALE}', $totalSale."(".$totalSubscriptions.")", $regMessage);
        $regMessage = str_replace('{TOTAL_SALE}', $totalSubscriptions, $regMessage);
        
        $regMessage = str_replace('{INR_SALE}', $this->number_format_clean($totalINRSale, 2, '.', '') ."(".$totalINRSubscriptions.")", $regMessage);
        $regMessage = str_replace('{USD_SALE}', $this->number_format_clean($totalUSDSale, 2, '.', '') ."(".$totalUSDSubscriptions.")", $regMessage);
        $regMessage = str_replace('{SGD_SALE}', $this->number_format_clean($totalSGDSale, 2, '.', '') ."(".$totalSGDSubscriptions.")", $regMessage);
        
        //$regMessage = str_replace('{ONLINE_SALE}', $totalOnlineSale."(".$totalOnlineSubscribtions.")", $regMessage);
        $regMessage = str_replace('{ONLINE_SALE}', $totalOnlineSubscribtions, $regMessage);
        $regMessage = str_replace('{ONLINE_INR}', $this->number_format_clean($totalINROnlineSale, 2, '.', '') ."(".$totalINROnlineSubscriptions.")", $regMessage);
        $regMessage = str_replace('{ONLINE_USD}', $this->number_format_clean($totalUSDOnlineSale, 2, '.', '') ."(".$totalUSDOnlineSubscriptions.")", $regMessage);
        $regMessage = str_replace('{ONLINE_SGD}', $this->number_format_clean($totalSGDOnlineSale, 2, '.', '') ."(".$totalSGDOnlineSubscriptions.")", $regMessage);
        
        //$regMessage = str_replace('{OFFLINE_SALE}', $totalOfflineSale."(".$totalOfflineSubscribtions.")", $regMessage);
        $regMessage = str_replace('{OFFLINE_SALE}', $totalOfflineSubscribtions, $regMessage);
        $regMessage = str_replace('{OFFLINE_INR}', $this->number_format_clean($totalINROfflineSale, 2, '.', '') ."(".$totalINROfflineSubscriptions.")", $regMessage);
        $regMessage = str_replace('{OFFLINE_USD}', $this->number_format_clean($totalUSDOfflineSale, 2, '.', '') ."(".$totalUSDOfflineSubscriptions.")", $regMessage);
        $regMessage = str_replace('{OFFLINE_SGD}', $this->number_format_clean($totalSGDOfflineSale, 2, '.', '') ."(".$totalSGDOfflineSubscriptions.")", $regMessage);
        
        //$regMessage = str_replace('{STUDY_SALE}', $totalStudySale."(".$totalSubscribedStudy.")", $regMessage);
        $regMessage = str_replace('{STUDY_SALE}', $totalSubscribedStudy, $regMessage);
        $regMessage = str_replace('{STUDY_INR}', $this->number_format_clean($totalINRStudy, 2, '.', '') ."(".$totalSubscribedINRStudy.")", $regMessage);
        $regMessage = str_replace('{STUDY_USD}', $this->number_format_clean($totalUSDStudy, 2, '.', '') ."(".$totalSubscribedUSDStudy.")", $regMessage);
        $regMessage = str_replace('{STUDY_SGD}', $this->number_format_clean($totalSGDStudy, 2, '.', '') ."(".$totalSubscribedSGDStudy.")", $regMessage);
        
        //$regMessage = str_replace('{TABLET_SALE}', $totalTabletSale."(".$totalSubscribedTablet.")", $regMessage);
        $regMessage = str_replace('{TABLET_SALE}', $totalSubscribedTablet, $regMessage);
        $regMessage = str_replace('{TABLET_INR}', $this->number_format_clean($totalINRTablet, 2, '.', '') ."(".$totalSubscribedINRTablet.")", $regMessage);
        $regMessage = str_replace('{TABLET_USD}', $this->number_format_clean($totalUSDTablet, 2, '.', '') ."(".$totalSubscribedUSDTablet.")", $regMessage);
        $regMessage = str_replace('{TABLET_SGD}', $this->number_format_clean($totalSGDTablet, 2, '.', '') ."(".$totalSubscribedSGDTablet.")", $regMessage);
        
        //$regMessage = str_replace('{SDCARD_SALE}', $totalSDcardSale."(".$totalSubscribedSDcard.")", $regMessage);
        $regMessage = str_replace('{SDCARD_SALE}', $totalSubscribedSDcard, $regMessage);
        $regMessage = str_replace('{SDCARD_INR}', $this->number_format_clean($totalINRSDcard, 2, '.', '') ."(".$totalSubscribedINRSDcard.")", $regMessage);
        $regMessage = str_replace('{SDCARD_USD}', $this->number_format_clean($totalUSDSDcard, 2, '.', '') ."(".$totalSubscribedUSDSDcard.")", $regMessage);
        $regMessage = str_replace('{SDCARD_SGD}', $this->number_format_clean($totalSGDSDcard, 2, '.', '')."(".$totalSubscribedSGDSDcard.")", $regMessage);
        
        
        $message = "Dear Sir,<br><br>  Please find below the Registration Info and User subscriptions summary for ".date('d-m-Y', strtotime('-1 day', strtotime($currentDate)))." on EmLive.<br /> Also, please find attached excel of yesterday's purchased package details:<br/><br/><br/>".$regMessage;
        //echo $message; die;
        
        // generating csv file
        
        $this->dailymiscsv();
        
        $file_path = "public/uploads/admin/MisReport/";
        $file_name = 'Sale_Details_'. date('Y-m-d', strtotime('-1 day', strtotime($currentDate))).'.xls';
        $xlsFilePath  = $file_path.$file_name;
        
        
        // entry in email content table
        $subject = "Daily MIS Report";
        
        $config = $this->getServiceLocator()->get('config');
        $recipient = $config['daily_report_to'];// get the daily mis report receipient config data
        //echo $recipient; die;
        
        $to = $recipient;
        $mailContentTable = $this->getServiceLocator()->get('Package\Model\TmailContent');
        $emailData = array("email_id" => $to, 'subject' => $subject, 'message' => $message, 'mail_type' => 'dailymisreport', 'status' => 1, 'mail_attachment' => $xlsFilePath);
        $res = $mailContentTable->addMultiEmailContent($emailData);
        die('Daily MIS Report Email generation completed');
        exit;
    } 
    
    private function number_format_clean($number,$precision=0,$dec_point='.',$thousands_sep=',')
    {
        if($number == '0') {
            return $number;
        } else if ( strpos( $number, "." ) !== false ) {
            return number_format($number,$precision,$dec_point,$thousands_sep);
        } else {
            return $number;
        }
    }
    
    public function dailymiscsv() {
        
        $search_array = array();
        
        
        $currentDate = date('d-m-Y');
        $createdDate = date('d-m-Y', strtotime('-1 day', strtotime($currentDate)));
        $createdDate = date('Y-m-d', strtotime($createdDate));
        
        $search_array['fromDate'] = $createdDate;
        $search_array['toDate'] = $createdDate;
        

        $table = $this->getServiceLocator()->get('Assessment\Model\UserTable');

        $paginator = $table->misReportDataManagement($search_array);
        $userLogObj = $this->getServiceLocator()->get("lms_container_mapper");
        $result['rResult'] = array();
        foreach ($paginator as $results) {
            if($results->coupon_type != 'test' && $results->coupon_type != 'demo') {
                $result['rResult'][] = $results;
                if (trim($results->package_name) != 'All Subject' || $results->package_name != 'All Subjects') {
                    $subjectName = '';

                    $subjectIds = explode(',', $results->syllabus_id);
                    foreach ($subjectIds as $key => $val) {
                        $subjectObj = $userLogObj->getContainer($val);
                        if (is_object($subjectObj)) {
                            $subjectName .= $subjectObj->getRackName()->getName() . ' , ';                        
                        }
                    }
                    $subject[$results->order_id] = ' (' . $subjectName . ')';
                }
                if ($results->user_id == $results->purchaser_id) {
                    $purchasedBy[$results->order_id] = '<b>Purchased for: </b>Self';
                } else {
                    $parent_details = isset($results->parent_name) ? $results->parent_name : $results->parent_email;
                    $child_details = !empty($results->username) ? $results->username : $results->display_name;
                    $purchasedBy[$results->order_id] = "<b>Purchased by: </b>" . $parent_details . '<br/>' . $results->parent_mobile . '<br />' . $results->parent_address . '<br/><b>Purchased for User Id: </b>' . $child_details;
                }
            }
        }

        $columns = array('First Name', 'Email','Address','User Type','Board', 'Order Id', 'Payment Mode', 'Package Name', 'Order Date', 'Full price', 'Discount code', 'Discount Detail', 'Paid Price', 'Status', 'Transction Type', 'Purchased By', 'Quantity'); //, 'Order Date', 'Full price', 'Discount code', '% discount', 'Paid Price','Status','Transction Type','Purchased By','Quantity'
        // Create a new PHPExcel object 
        $objPHPExcel = new \PHPExcel();
        $objPHPExcel->getActiveSheet()->setTitle('List of Users');

        // Field names in the first row        
        $col = 0;
        foreach ($columns as $field) {
            $objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($col, 1, $field);
            $col++;
        }

        $fields = array('first_name','email','address', 'user_type','board_name', 'order_id','pkg_payment_type', 'package_name', 'purchase_date', 'price', 'coupon_code', 'discount_percent', 'paid_price', 'pkg_payment_details', 'transaction_product_type', 'purchased_by', 'quantity');
        // Fetching the table data
        $row = 2;
        $failureRowStarts = false;
        foreach ($result['rResult'] as $data) {
            if($data->pkg_payment_details == 'Failed' && $failureRowStarts == false){
                $row++;
                $failureRowStarts = true;
            }
            $usertype = 'NA';
            if ($data->user_type_id == 1) {
                $usertype = 'Student';
            } else if ($data->user_type_id == 2) {
                $usertype = 'Parent';
            }
             if ($data->user_id == $data->purchaser_id) {
                $purchaseduserBy[$data->order_id] = 'Self';
            } else {
                $parent_details = isset($data->parent_name) ? $data->parent_name : $data->parent_email;
                $child_details = !empty($data->username) ? $data->username : $data->display_name;
                $purchaseduserBy[$data->order_id] = $parent_details."("."Parent".")";
            }
        //echo '<pre>';print_r($purchaseduserBy[$data->order_id]);
            $col = 0;
            foreach ($fields as $field) {
                $firstCol = '';
                if ($field == 'first_name') {
                    
//                   $firstCol = $data->display_name."\n".$data->emailId."\n".$data->address."\n".$data->mobile."\n".$location.$purchasedBy[$data->order_id];                                      
                    $firstCol = $data->display_name;

                    $data->$field = $firstCol;
                }
                 if ($field == 'email') {
                      $data->$field = $data->emailId;
                 }
                  if ($field == 'address') {
                      $address = isset($data->address) ? $data->address : $data->parent_address;
                      //$address =$data->address;
                      $location = isset($data->city) ? $data->city : $data->state_name;
                      $data->$field = $address.''.$location;
                 }
                 if($field=='user_type'){
                     $data->$field =  $usertype;
                 }
                if ($field == 'board_name') {
                    $secondCol = $data->board_name . '-' . $data->class_name;
                    $data->$field = $secondCol;
                }
                if ($field == 'package_name') {
                    $thirdCol = $data->package_name . $subject[$data->order_id];
                    $data->$field = $thirdCol;
                }
                if ($field == 'purchased_by') {
                    $fourCol = $purchaseduserBy[$data->order_id];
                    $data->$field = $fourCol;
                }
                if ($field == 'quantity') {
                    $data->$field = '1';
                }
                
                if ($field == 'discount_percent') {
                    $discount = "";
                    if($data->discount_type == 'percent')
                        $discount = $data->discount_percent. "%";
                    else if($data->discount_type == 'fixed')
                        $discount = $data->discount_percent;
                    $data->$field = $discount;
                }
                
                $objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($col, $row, $data->$field);
                $col++;
            }

            $row++;
        }

        // Freeze pane so that the heading line won't scroll 
        $objPHPExcel->getActiveSheet()->freezePane('A2');


        // Save as an Excel BIFF (xls) file 
        $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
        $tmpFilename = tempnam('./temp', 'tmp');
        
        $objWriter->save($tmpFilename);
        $file_name = 'Sale_Details_'. date('Y-m-d', strtotime('-1 day', strtotime($currentDate)));
        $this->ftpFileUploaded($tmpFilename, 'uploads/admin/MisReport/'.$file_name.'.xls');
//         echo '<pre>';print_r ();echo '</pre>';die('Vikash');       
//        $objWriter->save('public/uploads/admin/MisReport/'.date('Y-m-d').'.xls');

    }
    
    public function ftpFileUploaded($sourcePath, $targetPath) {
        $config = $this->getServiceLocator()->get('config');
        $ftpDetails = $config['ftp_config'];
        $conn_id = ftp_connect($ftpDetails['FTP_SERVER']);        // set up basic connection        
        $login_result = ftp_login($conn_id, $ftpDetails['FTP_USERNAME'], $ftpDetails['FTP_PASSWORD']); // ftp login     
        if ($login_result) {
            $upload = ftp_put($conn_id, $targetPath, $sourcePath, FTP_BINARY);  // upload the file
            if (!$upload) {  // check upload status
                $fileStatus = 'error';
            } else {
                $fileStatus = 'success';
            }
        } else {
            $fileStatus = 'error';
        }
        ftp_close($conn_id); // close the FTP stream     
        //echo "<pre />"; print_r($fileStatus);exit;
        return $fileStatus;
    }
     public function sendExpiryRemindersfunction() { 
        $ToBeExpiredUserPackages = $this->getServiceLocator()->get('package_service')->getPackagesForExpiryMailReminders();
        //echo '<pre>';print_r($ToBeExpiredUserPackages);die;
        foreach ($ToBeExpiredUserPackages as $key => $up) {
            if ($up['daysLeft'] >= 1 && $up['emailStartDate']!='') {// print_r($up);
                $start_date = date('Y-m-d', strtotime($up['emailStartDate']));
                    $today_date = date('Y-m-d');
                    $valid_till = $up['validTill'];
                    $valid_till->format('Y-m-d');
                   // while ($start_date <= $valid_till) {
                        $expiry_date = date_create($valid_till->format('Y-m-d'));
                        $todaydate = date_create($today_date);
                        $diff = date_diff($expiry_date, $todaydate);
                        $days = $diff->d; 
                        if ($days % 7 == 0) {
                            $this->insertExpiryMailContent($up, $up['daysLeft']);
                            $this->insertExpiryNotificationContent($up, $up['daysLeft']);
                           // break;
                        }//echo $start_date;
                       // $time = strtotime($start_date) + (7 * 24 * 60 * 60);
                    //echo     $start_date = date('Y-m-d', $time);//die;
                   // }//die;
            } elseif ($up['daysLeft'] == 0) {
                $this->insertExpiryMailContent($up, $up['daysLeft']);
                $this->insertExpiryNotificationContent($up, $up['daysLeft']);
                //  $this->deactivatePackage($up['userId'], $up['userPackageId']);
            } elseif ($up['daysLeft'] < 0 && ($up['daysLeft'] % 7) == 0) {
                $this->insertExpiryMailContent($up, $up['daysLeft']);
                $this->insertExpiryNotificationContent($up, $up['daysLeft']);
            } else {
                echo '<pre>';
                print_r('No Mail to send');
                echo '</pre>';
                //die('Macro Die');
            }
        }
        
        $this->insertExpiryReminder();
        $this->deactivatePackage();
        $this->deactivateTestPackage();
        die;
    }

    private function insertExpiryMailContent($packageDetails, $daysLeft) { //echo '<pre>';print_r($packageDetails);echo '</pre>';die('Macro Die');
        $mailContentTable = $this->getServiceLocator()->get('Package\Model\TmailContent');
        $validityDate = (array)$packageDetails['validTill'];
            
        // $preExpiryMailContent = file_get_contents('/index/expiry-mail.html'); //filePath
        //$preExpiryMailContent = file_get_contents(__DIR__ . '../../../../../Webpackage/view/webpackage/index/expiry-mail.html');
        $filepath= __DIR__ . '../../../../view/mailer/';
        $preExpiryMailContent = file_get_contents($filepath.'expiry-mail.html');
        $user_data = $this->getEmailFromUserId($packageDetails['userId']);
        $mailType = 'package_expiration';
        $to=$user_data['email'];

        $event = $this->getEvent();
        $requestURL = $event->getRequest();
        $router = $event->getRouter();
        $uri = $router->getRequestUri();
        $basepath = sprintf('%s://%s%s', $uri->getScheme(), $uri->getHost(), $requestURL->getBaseUrl());
        
        $preExpiryMailContent = str_replace('{USER_NAME}', $user_data['display_name'], $preExpiryMailContent);
        $preExpiryMailContent = str_replace('{PACKAGE_NAME}', $packageDetails['packageName'], $preExpiryMailContent);
        $preExpiryMailContent = str_replace('{BOARD_NAME}', $packageDetails['board'], $preExpiryMailContent);
        $preExpiryMailContent = str_replace('{CLASS_NAME}', $packageDetails['class'], $preExpiryMailContent);
        $preExpiryMailContent = str_replace('{VALIDITY}', $validityDate['date'], $preExpiryMailContent);
        $preExpiryMailContent = str_replace('{SITE_URL}', $basepath, $preExpiryMailContent);
        $validTill = $packageDetails['validTill'];

       // $preExpiryMailContent = str_replace('{validTill}', $validTill->format('d M Y'), $preExpiryMailContent);
        $preExpiryMailContent = str_replace('{buy_package_link}', $basepath . '/package', $preExpiryMailContent);
       // $preExpiryMailContent = str_replace('{SUBCRIPTION_MESSAGE}', "<b>" . $packageDetails['packageName'] .'('.$packageDetails['board'].'-'. $packageDetails['class']. ')' . "</b>", $preExpiryMailContent);
        switch (true) {
            case $daysLeft > 0:
                $ordersubject = "Your Package Expiring Soon";
                $subcription_message='Your subscription for the '.$packageDetails['packageName'].' for class '.$packageDetails['class'].', Board '.$packageDetails['board'].' will expire on '.$validTill->format('d M Y').'. ';
                $preExpiryMailContent = str_replace('{SUBCRIPTION_MESSAGE}',  $subcription_message , $preExpiryMailContent);
                $message = $preExpiryMailContent;
                $emailData = array("email_id" => $to, 'subject' => $ordersubject, 'message' => $message, 'mail_type' => $mailType, 'status' => 1);

                break;
            case $daysLeft < 0:
                $ordersubject = "Your Package has been Expired";
                $subcription_message='Your subscription for the '.$packageDetails['packageName'].' for class '.$packageDetails['class'].', Board '.$packageDetails['board'].' has been expired on '.$validTill->format('d M Y').'. ';
                $preExpiryMailContent = str_replace('{SUBCRIPTION_MESSAGE}',  $subcription_message , $preExpiryMailContent);
                $message = $preExpiryMailContent;
                $emailData = array("email_id" => $to, 'subject' => $ordersubject, 'message' => $message, 'mail_type' => $mailType, 'status' => 1);

                break;
            case $daysLeft == 0:
                $ordersubject = "Your Package Expiring today";
                $subcription_message='Your subscription for the '.$packageDetails['packageName'].' for class '.$packageDetails['class'].', Board '.$packageDetails['board'].' has been expired on '.$validTill->format('d M Y').'. ';
                $preExpiryMailContent = str_replace('{SUBCRIPTION_MESSAGE}',  $subcription_message , $preExpiryMailContent);
                $message = $preExpiryMailContent;
                $emailData = array("email_id" => $to, 'subject' => $ordersubject, 'message' => $message, 'mail_type' => $mailType, 'status' => 1);

                break;
        } //echo $message;die;
        $emailData['created_time']=date('Y-m-d H:i:s');
        $mailContentTable->addEmailContent($emailData);
    }

    private function insertExpiryNotificationContent($packageDetails, $daysLeft) {
        if ($daysLeft == 0) {
            $daysLeft = 'today';
        } elseif ($daysLeft == 1) {
            $daysLeft = 'tomorrow';
        } else {
            $daysLeft = 'in ' . $daysLeft . ' days';
        }
        $event = $this->getEvent();
        $requestURL = $event->getRequest();
        $router = $event->getRouter();
        $uri = $router->getRequestUri();
        $basepath = sprintf('%s://%s%s', $uri->getScheme(), $uri->getHost(), $requestURL->getBaseUrl());
        $buyurl= $basepath.'/package';
        $validTill = $packageDetails['validTill'];
        $notificationtable = $this->getServiceLocator()->get('Notification\Model\NotificationTable');
        $notificationdata = array(
            'notification_text' => 'Your Subscription-<b>' . $packageDetails['packageName'].'('.$packageDetails['board'].'-'. $packageDetails['class']. ')</b> is going to expire ' . $daysLeft . '. Click <a href="'.$buyurl.'"><b>here</b> </a> if you want to continue the subscription. &nbsp;&nbsp;',
            'userid' => $packageDetails['userId'],
            'type_id' => 5, // package_expiry
            'relation_id' => '',
            'notification_url' => '',
            'created_by' => $packageDetails['userId'],
            'created_date' => date('Y-m-d H:i:s'),
        );
        $notificationtable->insertnotification($notificationdata);
    }

    private function deactivatePackage() {
        $packagetable = $this->getServiceLocator()->get('Package\Model\TuserpackageTable');
        $packagetable->deactivatepackage();
    }
    private function deactivateTestPackage() {
        $packagetable = $this->getServiceLocator()->get('Package\Model\TuserpackageTable');
        $packagetable->deactivatetestpackage();
    }
    private function insertExpiryReminder(){
        // $expiryMailContent = file_get_contents(__DIR__ . '../../../../../Webpackage/view/webpackage/index/expiry-notification.html');//die;
        $filepath= __DIR__ . '../../../../view/mailer/';
        $expiryMailContent = file_get_contents($filepath.'expiry-notification.html');
        $packagetable = $this->getServiceLocator()->get('Package\Model\TuserpackageTable');
        $mailContentTable = $this->getServiceLocator()->get('Package\Model\TmailContent');
        $userpackage=$packagetable->getuserPackagetobeExpire(); 

        $event = $this->getEvent();
        $requestURL = $event->getRequest();
        $router = $event->getRouter();
        $uri = $router->getRequestUri();
        $basepath = sprintf('%s://%s%s', $uri->getScheme(), $uri->getHost(), $requestURL->getBaseUrl());
        
      $msg='<table border="1" cellspacing="0" cellpadding="0" width="100%">';
        
      $i=1;
      if(count($userpackage)>0 && !empty($userpackage)){
          $msg.='<tr><td><b>Sr. No.</b></td><td><b>Name</b></td><td><b>Email</b></td><td><b>Package Name</b></td><td><b>Valid Till</b></td></tr>';
      foreach($userpackage as $key=>$value){
          $msg .='<tr><td>'.$i.'</td><td>'. $value->first_name.'</td><td>'. $value->email.'</td><td>'.$value->package_name.'</td><td>'.date('d-m-Y',strtotime($value->valid_till)).'</td></tr>';
                $i++;
            }
      }else{
            $msg .='<tr><td colspan="5">No package expired</td></tr>';
        }
        $msg .='</table>';

        $expiryMailContent = str_replace('{UserList}', $msg, $expiryMailContent);
        $expiryMailContent = str_replace('{BASE_URL}', $basepath, $expiryMailContent);
        $expiryMailContent; //die;
        $subject = 'Expired Package List';
        $mailType = 'expired_package_list';
        $to = 'adil.saleem@extramarks.com,neha.dixit@extramarks.com,alok.vishwakarma@extramarks.com';
        $emailData = array("email_id" => $to, 'subject' => $subject, 'message' => $expiryMailContent, 'mail_type' => $mailType, 'status' => 1);
        $mailContentTable->addMultiEmailContent($emailData);
    }
    
    private function getEmailFromUserId($userid){
      
                    $usertable = $this->getServiceLocator()->get('Assessment\Model\userTable');
                    $userData = $usertable->getuserdetailsById($userid);
                    $userDataArray = $userData->current();
                if ($userDataArray->user_type_id== 1 && filter_var($userDataArray->emailId, FILTER_VALIDATE_EMAIL)) {
                    $userArray['email'] = $userDataArray->emailId;
                    $userArray['display_name'] = $userDataArray->display_name;
                } else if ($userDataArray->user_type_id== 1 && $userDataArray->parent_id!= '') {
                    $parent_id = $userDataArray->parent_id;
                    $parentData = $usertable->getuserdetailsById($parent_id);
                    $parentDataArray = $parentData->current(); //print_r($parentDataArray);die;
                    $userArray['email'] = $parentDataArray->emailId;
                    $userArray['display_name'] = $parentDataArray->display_name;
                } else {
                    $userArray['email'] =$userDataArray->emailId;
                    $userArray['display_name'] =$userDataArray->display_name;
                }
                
                return  $userArray;
    }
    
    public function datediffInWeeks($date1, $date2)
    {
        $startDateUnix = strtotime($date1);
        $endDateUnix = strtotime($date2);
        $currentDateUnix = $startDateUnix;
        $weekNumbers = array();
        while ($currentDateUnix < $endDateUnix) {
            $weekNumbers[] = date('W', $currentDateUnix);
            $currentDateUnix = strtotime('+1 week', $currentDateUnix);
        }
        return count($weekNumbers);
    }
    
    public function datediffInMonths($date1, $date2)
    {
        $startDateUnix = strtotime($date1);
        $endDateUnix = strtotime($date2);
        $currentDateUnix = $startDateUnix;
        $monthsDates = array();
        while ($currentDateUnix < $endDateUnix) {;
            $monthsDates[] = date("Y-m-d",$currentDateUnix);
            $currentDateUnix = strtotime('+1 month', $currentDateUnix);
        }
        //echo '<pre>'; print_r($monthsDates); exit;
        return count($monthsDates);
    }
    
    public function datediffInYears($date1, $date2)
    {
        $startDateUnix = strtotime($date1);
        $endDateUnix = strtotime($date2);
        $currentDateUnix = $startDateUnix;
        $yearsDates = array();
        while ($currentDateUnix < $endDateUnix) {;
            $yearsDates[] = date("Y-m-d",$currentDateUnix);
            $currentDateUnix = strtotime('+1 year', $currentDateUnix);
        }
        //echo '<pre>'; print_r($monthsDates); exit;
        return count($yearsDates);
    }
    
    public function datediffInDays($date1, $date2)
    {
        $startDateUnix = strtotime($date1);
        $endDateUnix = strtotime($date2);
        $currentDateUnix = $startDateUnix;
        $yearsDates = array();
        while ($currentDateUnix < $endDateUnix) {;
            $yearsDates[] = date("Y-m-d",$currentDateUnix);
            $currentDateUnix = strtotime('+1 day', $currentDateUnix);
        }
        //echo '<pre>'; print_r($monthsDates); exit;
        return count($yearsDates);
    }
    
    public function notificationcronAction() {
        ini_set('memory_limit', '1024M');
        ini_set('max_execution_time', 300);
        
        $offset=0;
        $limit=2000;
        $notificationService = $this->getServiceLocator()->get('notification\Model\NotificationTable');
        $allNotificationCount = $notificationService->getAllSeenNotificationOfAdminCount();
        if($allNotificationCount > 0) {
            while($offset <= $allNotificationCount) {
                $allNotificationRowSet = $notificationService->getAllSeenNotificationOfAdmin($offset,$limit);
                $offset=$offset+$limit;
                foreach($allNotificationRowSet as $notification) {
                    //echo '<pre>'; print_r($notification); exit;
                    if($notification->notify_appear_type =='all_day') {
                        $notification_start_date = date("Y-m-d",strtotime($notification->notification_start_date));
                        $notification_end_date = date("Y-m-d",strtotime($notification->notification_end_date));
                        if($notification_start_date <= date('Y-m-d') && $notification_end_date >= date('Y-m-d')) {
                            if($notification->seen == 1) {
                                $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                $notificationService->updateStatus($notification->notification_id, $data);
                            }
                        }
                    } else if($notification->notify_appear_type =='recur') {
                        
                        if($notification->notification_occurrence_type == 'occurrence_no') {
                            $notification_start_date = date("Y-m-d",strtotime($notification->notification_start_date));
                            $notification_occurrence_no = $notification->notification_occurrence_no;

                            if($notification->notification_recurrence_on=='weekly') {
                                $finalWeekDate = date( "Y-m-d" , strtotime("$notification_start_date +".$notification_occurrence_no.' Weeks'));
                                if($finalWeekDate >= date("Y-m-d")) {
                                    for($i=0;$i<$notification_occurrence_no;$i++) {
                                        if($i==0) {
                                            if($notification_start_date == date('Y-m-d')) {
                                                if($notification->seen==1){
                                                    $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                    $notificationService->updateStatus($notification->notification_id, $data);
                                                }
                                            }
                                        } else {
                                            $notification_week_date = date( "Y-m-d" , strtotime("$notification_start_date +".$i.' Weeks'));
                                            if($notification_week_date == date('Y-m-d')) {
                                                if($notification->seen==1) {
                                                    $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                    $notificationService->updateStatus($notification->notification_id, $data);
                                                }
                                            }
                                        }
                                    }
                                }
                            } else if($notification->notification_recurrence_on=='monthly'){
                                $finalMonthDate = date( "Y-m-d" , strtotime("$notification_start_date +".$notification_occurrence_no.' months'));
                                if($finalMonthDate >= date("Y-m-d")) {
                                    for($i=0;$i<$notification_occurrence_no;$i++) {
                                        if($i==0) {
                                            if($notification_start_date == date('Y-m-d')) {
                                                if($notification->seen==1){
                                                    $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                    $notificationService->updateStatus($notification->notification_id, $data);
                                                }
                                            }
                                        } else {
                                            $notification_month_date = date( "Y-m-d" , strtotime("$notification_start_date +".$i.' months'));
                                            if($notification_month_date == date('Y-m-d')) {
                                                if($notification->seen==1) {
                                                    $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                    $notificationService->updateStatus($notification->notification_id, $data);
                                                }
                                            }
                                        }
                                    }
                                }
                            } else if($notification->notification_recurrence_on=='yearly'){
                                $finalYearDate = date( "Y-m-d" , strtotime("$notification_start_date +".$notification_occurrence_no.' years'));
                                if($finalYearDate >= date("Y-m-d")) {
                                    for($i=0;$i<$notification_occurrence_no;$i++) {
                                        if($i==0) {
                                            if($notification_start_date == date('Y-m-d')) {
                                                if($notification->seen==1){
                                                    $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                    $notificationService->updateStatus($notification->notification_id, $data);
                                                }
                                            }
                                        } else {
                                            $notification_year_date = date( "Y-m-d" , strtotime("$notification_start_date +".$i.' years'));
                                            if($notification_year_date == date('Y-m-d')) {
                                                if($notification->seen==1) {
                                                    $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                    $notificationService->updateStatus($notification->notification_id, $data);
                                                }
                                            }
                                        }
                                    }
                                }
                            } else if($notification->notification_recurrence_on=='daily'){
                                $finalDateDate = date( "Y-m-d" , strtotime("$notification_start_date +".$notification_occurrence_no.' days'));
                                if($finalDateDate >= date("Y-m-d")) {
                                    for($i=0;$i<$notification_occurrence_no;$i++) {
                                        if($i==0) {
                                            if($notification_start_date == date('Y-m-d')) {
                                                if($notification->seen==1){
                                                    $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                    $notificationService->updateStatus($notification->notification_id, $data);
                                                }
                                            }
                                        } else {
                                            $notification_day_date = date( "Y-m-d" , strtotime("$notification_start_date +".$i.' days'));
                                            if($notification_day_date == date('Y-m-d')) {
                                                if($notification->seen==1) {
                                                    $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                    $notificationService->updateStatus($notification->notification_id, $data);
                                                }
                                            }
                                        }
                                    }
                                }
                            } else if($notification->notification_recurrence_on=='weekdays') {
                                $finalWeekDate = date( "Y-m-d" , strtotime("$notification_start_date +".$notification_occurrence_no.' Weeks'));
                                $startTime = strtotime($notification_start_date); // or your date as well
                                $endTime = strtotime($finalWeekDate);
                                $datediff = $startTime - $endTime;
                                $totalDays = floor($datediff/(60*60*24));

                                if($finalWeekDate >= date("Y-m-d")) {
                                    for($i=0;$i<$totalDays;$i++) {
                                        if($i==0) {
                                            if($notification_start_date == date('Y-m-d')) {
                                                if($notification->seen==1){
                                                    if(date('N', strtotime($notification_start_date)) < 6) {
                                                        $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                        $notificationService->updateStatus($notification->notification_id, $data);
                                                    }
                                                }
                                            }
                                        } else {
                                            $notification_week_date = date( "Y-m-d" , strtotime("$notification_start_date +".$i.' Weeks'));
                                            if($notification_week_date == date('Y-m-d')) {
                                                if($notification->seen==1) {
                                                    if(date('N', strtotime($notification_week_date)) < 6) {
                                                        $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                        $notificationService->updateStatus($notification->notification_id, $data);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else if($notification->notification_recurrence_on=='week-off'){
                                $finalWeekDate = date( "Y-m-d" , strtotime("$notification_start_date +".$notification_occurrence_no.' Weeks'));
                                $startTime = strtotime($notification_start_date); // or your date as well
                                $endTime = strtotime($finalWeekDate);
                                $datediff = $startTime - $endTime;
                                $totalDays = floor($datediff/(60*60*24));

                                if($finalWeekDate >= date("Y-m-d")) {
                                    for($i=0;$i<$totalDays;$i++) {
                                        if($i==0) {
                                            if($notification_start_date == date('Y-m-d')) {
                                                if($notification->seen==1){
                                                    if(date('N', strtotime($notification_start_date)) >= 6) {
                                                        $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                        $notificationService->updateStatus($notification->notification_id, $data);
                                                    }
                                                }
                                            }
                                        } else {
                                            $notification_week_date = date( "Y-m-d" , strtotime("$notification_start_date +".$i.' Weeks'));
                                            if($notification_week_date == date('Y-m-d')) {
                                                if($notification->seen==1) {
                                                    if(date('N', strtotime($notification_week_date)) >= 6) {
                                                        $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                        $notificationService->updateStatus($notification->notification_id, $data);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } else if($notification->notification_occurrence_type == 'specific_date') {
                            $notification_start_date = date("Y-m-d",strtotime($notification->notification_start_date));
                            $notification_end_date = date("Y-m-d",strtotime($notification->notification_end_date));

                            if($notification->notification_recurrence_on=='weekly'){
                                $notification_occurrence_no = $this->datediffInWeeks($notification_start_date, $notification_end_date);
                                //$finalWeekDate = date( "Y-m-d" , strtotime("$notification_start_date +".$notification_occurrence_no.' Weeks'));
                                if($notification_end_date >= date("Y-m-d")) {
                                    for($i=0;$i<$notification_occurrence_no;$i++) {
                                        if($i==0) {
                                            if($notification_start_date == date('Y-m-d')) {
                                                if($notification->seen==1){
                                                    $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                    $notificationService->updateStatus($notification->notification_id, $data);
                                                }
                                            }
                                        } else {
                                            $notification_week_date = date( "Y-m-d" , strtotime("$notification_start_date +".$i.' Weeks'));
                                            if($notification_week_date == date('Y-m-d')) {
                                                if($notification->seen==1) {
                                                    $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                    $notificationService->updateStatus($notification->notification_id, $data);
                                                }
                                            }
                                        }
                                    }
                                }
                            } else if($notification->notification_recurrence_on=='monthly') {
                                $notification_occurrence_no = $this->datediffInMonths($notification_start_date, $notification_end_date);
                                if($notification_end_date >= date("Y-m-d")) {
                                    for($i=0;$i<$notification_occurrence_no;$i++) {
                                        if($i==0) {
                                            if($notification_start_date == date('Y-m-d')) {
                                                if($notification->seen==1){
                                                    $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                    $notificationService->updateStatus($notification->notification_id, $data);
                                                }
                                            }
                                        } else {
                                            $notification_month_date = date( "Y-m-d" , strtotime("$notification_start_date +".$i.' months'));
                                            if($notification_month_date == date('Y-m-d')) {
                                                if($notification->seen==1) {
                                                    $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                    $notificationService->updateStatus($notification->notification_id, $data);
                                                }
                                            }
                                        }
                                    }
                                }
                            } else if($notification->notification_recurrence_on=='yearly'){
                                $notification_occurrence_no = $this->datediffInYears($notification_start_date, $notification_end_date);
                                if($notification_end_date >= date("Y-m-d")) {
                                    for($i=0;$i<$notification_occurrence_no;$i++) {
                                        if($i==0) {
                                            if($notification_start_date == date('Y-m-d')) {
                                                if($notification->seen==1){
                                                    $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                    $notificationService->updateStatus($notification->notification_id, $data);
                                                }
                                            }
                                        } else {
                                            $notification_year_date = date( "Y-m-d" , strtotime("$notification_start_date +".$i.' years'));
                                            if($notification_year_date == date('Y-m-d')) {
                                                if($notification->seen==1) {
                                                    $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                    $notificationService->updateStatus($notification->notification_id, $data);
                                                }
                                            }
                                        }
                                    }
                                }
                            } else if($notification->notification_recurrence_on=='daily'){
                                $notification_occurrence_no = $this->datediffInDays($notification_start_date, $notification_end_date);
                                if($notification_end_date >= date("Y-m-d")) {
                                    for($i=0;$i<$notification_occurrence_no;$i++) {
                                        if($i==0) {
                                            if($notification_start_date == date('Y-m-d')) {
                                                if($notification->seen==1){
                                                    $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                    $notificationService->updateStatus($notification->notification_id, $data);
                                                }
                                            }
                                        } else {
                                            $notification_day_date = date( "Y-m-d" , strtotime("$notification_start_date +".$i.' days'));
                                            if($notification_day_date == date('Y-m-d')) {
                                                if($notification->seen==1) {
                                                    $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                    $notificationService->updateStatus($notification->notification_id, $data);
                                                }
                                            }
                                        }
                                    }
                                }
                            } else if($notification->notification_recurrence_on=='weekdays'){
                                $finalWeekDate = $notification_end_date;
                                $startTime = strtotime($notification_start_date); // or your date as well
                                $endTime = strtotime($finalWeekDate);
                                $datediff = $startTime - $endTime;
                                $totalDays = floor($datediff/(60*60*24));

                                if($finalWeekDate >= date("Y-m-d")) {
                                    for($i=0;$i<$totalDays;$i++) {
                                        if($i==0) {
                                            if($notification_start_date == date('Y-m-d')) {
                                                if($notification->seen==1){
                                                    if(date('N', strtotime($notification_start_date)) < 6) {
                                                        $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                        $notificationService->updateStatus($notification->notification_id, $data);
                                                    }
                                                }
                                            }
                                        } else {
                                            $notification_week_date = date( "Y-m-d" , strtotime("$notification_start_date +".$i.' Weeks'));
                                            if($notification_week_date == date('Y-m-d')) {
                                                if($notification->seen==1) {
                                                    if(date('N', strtotime($notification_week_date)) < 6) {
                                                        $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                        $notificationService->updateStatus($notification->notification_id, $data);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            } else if($notification->notification_recurrence_on=='week-off'){
                                $finalWeekDate = $notification_end_date;
                                $startTime = strtotime($notification_start_date); // or your date as well
                                $endTime = strtotime($finalWeekDate);
                                $datediff = $startTime - $endTime;
                                $totalDays = floor($datediff/(60*60*24));

                                if($finalWeekDate >= date("Y-m-d")) {
                                    for($i=0;$i<$totalDays;$i++) {
                                        if($i==0) {
                                            if($notification_start_date == date('Y-m-d')) {
                                                if($notification->seen==1){
                                                    if(date('N', strtotime($notification_start_date)) >= 6) {
                                                        $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                        $notificationService->updateStatus($notification->notification_id, $data);
                                                    }
                                                }
                                            }
                                        } else {
                                            $notification_week_date = date( "Y-m-d" , strtotime("$notification_start_date +".$i.' Weeks'));
                                            if($notification_week_date == date('Y-m-d')) {
                                                if($notification->seen==1) {
                                                    if(date('N', strtotime($notification_week_date)) >= 6) {
                                                        $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                                        $notificationService->updateStatus($notification->notification_id, $data);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }    
                            }
                        }
                    } else if($notification->notify_appear_type =='one_time') {
                        $notification_start_date = date("Y-m-d",strtotime($notification->notification_start_date));
                        $notification_end_date = date("Y-m-d",strtotime($notification->notification_end_date));
                        if($notification_start_date <= date('Y-m-d') && $notification_end_date >= date('Y-m-d')) {
                            if($notification->seen == 1 && $notification->modified_date == '0000-00-00 00:00:00') {
                                $data = array('seen' => '0','modified_date' => date('Y-m-d h:i:s'));
                                $notificationService->updateStatus($notification->notification_id, $data);
                            }
                        }
                    }
                }
            }
        }
        die('Notifications Updated'); exit;
    }
    
    private function sendExpirySms() {
        $packagetable = $this->getServiceLocator()->get('Package\Model\TuserpackageTable');
        $packageArray=$packagetable->getPackageForSMS();
       // echo '<pre>';print_r($packageArray);echo '</pre>';die('Macro Die');
        foreach($packageArray as $key=>$value){
           $date_diff= $value->date_diff;
           if($value->mobile!='' && strlen(substr($value->mobile,-10))==10){
           $mobileNo=$value->mobile;
           }else{
           $mobileArray=$this->getMobileFromUserId($value->user_id);
           $mobileNo=$mobileArray['mobile'];
           }
           $smsDataArray['mobile']=$mobileNo;
           $smsDataArray['user_id']=$value->user_id;
           if(($value->package_category=='annual_package' && $value->class=='XII') || ($value->package_category=='combo_package' && $value->class=='XI')){
              // break;
           }else{
               if($value->date_diff==15){
                   $smsDataArray['msg']='Your study ('.$value->package_name.') package will expire soon. Log on to www.extramarks.com and
                                         continue enjoying the benefits of Extramarks LIVE.';
                  $this->sendSms($smsDataArray);
               }elseif($value->date_diff==7){
                   $smsDataArray['msg']='The clock is ticking. Continue enjoying the benefits of Extramarks LIVE by upgrading your chosen package.';
                   $this->sendSms($smsDataArray);
               }elseif($value->date_diff==0){
                   $smsDataArray['msg']='Last wakeup call! Your package would expire soon. Log on to www.extramarks.com and continue enjoying the benefits.';
                   $this->sendSms($smsDataArray);
               }else{
                  // echo 'sms not send';
               }
           }
        }
        echo 'msg sent';die;
        //echo '<pre>';print_r($packageArray);echo '</pre>';die('Macro Die');
    }
    
    private function sendSms($smsDataArray) {
         $config=$this->getServiceLocator()->get('config');
                $defaultstates = $config['msg_engine'];// get the msg config data
                if($defaultstates['status'] == 'ON'){
                   $msglog  = $this->getServiceLocator()->get('Package\Model\TmsgLogTable');         
                                   
                   $msgTxt = $smsDataArray['msg'];
                   $usermobile = $smsDataArray['mobile'];
                   $mobile     = explode("-", $usermobile);
                   $mob_number = str_replace('+','',$mobile[0]).$mobile[1];
                   $urltohit = "http://bulkpush.mytoday.com/BulkSms/SingleMsgApi?feedid=347144&username=9811816077&password=agmtj&To=".$mob_number."&Text=".urlencode($msgTxt); 
                   $datas = file_get_contents($urltohit);
                   $data = array('user_id'=>$smsDataArray['user_id'],'mobile_number'=>$usermobile,'api_response'=>$datas);
                   $result = $msglog->addlog($data); 
                   //$result   = $this->get_content($urltohit,$fields_string);

                }
    }
    private function getMobileFromUserId($userid){
                 $usertable = $this->getServiceLocator()->get('Assessment\Model\userTable');
                    $userData = $usertable->getuserdetailsById($userid);
                    $userDataArray = $userData->current();
                if ($userDataArray->mobile!= '' && strlen(substr($userDataArray->mobile,-10))==10) {
                    $userArray['mobile'] = $userDataArray->mobile;
                } else if ($userDataArray->user_type_id== 1 && $userDataArray->parent_id!= '') {
                    $parent_id = $userDataArray->parent_id;
                    $parentData = $usertable->getuserdetailsById($parent_id);
                    $parentDataArray = $parentData->current(); //print_r($parentDataArray);die;
                    $userArray['mobile'] = $parentDataArray->mobile;
                }else{
                    $userArray['mobile'] = $userDataArray->mobile;
                } 
                return  $userArray;
    }
}
