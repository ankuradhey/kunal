<?php
if(!$this->zfcUserIdentity() && strpos('register',$_SERVER['REQUEST_URI']) === false ) {
    // source 
    $source = $this->source;
    // referer
    $referer = "$_SERVER[HTTP_REFERER]";
    
    // current page
    $actual_link = "http://$_SERVER[HTTP_HOST]$_SERVER[REQUEST_URI]";
    $current_page = $actual_link;
    
    $boardListArr = $this->boardList();
    $countryListArr = $this->CountryList();
    $registration_plugin_base_path = "http://developer.extramarks.com";
?>
<link id="vikash_css_1" rel="stylesheet" href="<?php echo $registration_plugin_base_path.'/css/website/bootstrap.css'; ?>" type="text/css" media="screen" />
<link id="vikash_css_2" rel="stylesheet" href="<?php echo $registration_plugin_base_path.'/css/website/global.css'; ?>" type="text/css" media="screen" />
<script type="text/javascript">
    var selectClassString = 'Select Class'; var errorBoardString = 'board'; var errorClassString = 'class';
</script>
<script type="text/javascript" src="<?php echo $registration_plugin_base_path.'/js/website/jquery-1.11.2.js'; ?>"></script>
<script type="text/javascript" src="<?php echo $registration_plugin_base_path.'/js/website/jquery.selectbox-0.2.js'; ?>"></script>
<script type="text/javascript" src="<?php echo $registration_plugin_base_path.'/js/website/userRegister.js'; ?>"></script>
<link id="vikash_css_3" rel="stylesheet" href="<?php echo $registration_plugin_base_path.'/css/website/register.css'; ?>" type="text/css" media="screen" />
  
       <style>
         .register-page .container {width: 750px;}
         #regiterContainer{position: relative;}
         .ui-autocomplete.ui-front{ z-index: 9999999 !important; width: 300px !important}
/*         #exampleModalRegisterPopUp{ position: absolute !important; overflow-y:inherit;}*/
         body.modal-open{ overflow: hidden}
/*         .ui-autocomplete{position: fixed !important;}*/
         #content.register-page{ background: none !important; }
         button.Close-buttonreg{ display: block !important; color: #000; position: absolute; right: 8px; top: 12px; opacity:1;}
       </style>
<script type="text/javascript" src="<?php echo $registration_plugin_base_path.'/js/jquery.dd.js'; ?>"></script>

<script type='text/javascript'>
    
    // MSDropDown - jquery.dd.js
// author: Marghoob Suleman - http://www.marghoobsuleman.com/
// Date: 10 Nov, 2012 
// Version: 3.5.2
// Revision: 27
// web: www.marghoobsuleman.com
/*
// msDropDown is free jQuery Plugin: you can redistribute it and/or modify
// it under the terms of the either the MIT License or the Gnu General Public License (GPL) Version 2
*/ 
var msBeautify = msBeautify || {};
(function ($) {
	msBeautify = {
	version: {msDropdown:'3.5.2'},
	author: "Marghoob Suleman",
	counter: 20,
	debug: function (v) {
		if (v !== false) {
			$(".ddOutOfVision").css({height: 'auto', position: 'relative'});
		} else {
			$(".ddOutOfVision").css({height: '0px', position: 'absolute'});
		}
	},
	oldDiv: '',
	create: function (id, settings, type) {
		type = type || "dropdown";
		var data;
		switch (type.toLowerCase()) {
		case "dropdown":
		case "select":
			data = $(id).msDropdown(settings).data("dd");
			break;
		}
		return data;
	}
};

$.msDropDown = {}; //Legacy
$.msDropdown = {}; //camelCaps
$.extend(true, $.msDropDown, msBeautify);
$.extend(true, $.msDropdown, msBeautify);
// make compatibiliy with old and new jquery
if ($.fn.prop === undefined) {$.fn.prop = $.fn.attr;}
if ($.fn.on === undefined) {$.fn.on = $.fn.bind;$.fn.off = $.fn.unbind;}
if (typeof $.expr.createPseudo === 'function') {
	//jQuery 1.8  or greater
	$.expr[':'].Contains = $.expr.createPseudo(function (arg) {return function (elem) { return $(elem).text().toUpperCase().indexOf(arg.toUpperCase()) >= 0; }; });
} else {
	//lower version
	$.expr[':'].Contains = function (a, i, m) {return $(a).text().toUpperCase().indexOf(m[3].toUpperCase()) >= 0; };
}
//dropdown class
function dd(element, settings) {
	var settings = $.extend(true,
		{byJson: {data: null, selectedIndex: 0, name: null, size: 0, multiple: false, width: 250},
		mainCSS: 'dd',
		height: 120, //not using currently
		visibleRows: 7,
		rowHeight: 0,
		showIcon: true,
		zIndex: 9999,
		useSprite: false,
		animStyle: 'slideDown',
		event:'click',
		openDirection: 'auto', //auto || alwaysUp || alwaysDown
		jsonTitle: true,
		style: '',
		disabledOpacity: 0.7,
		disabledOptionEvents: true,
		childWidth:0,
		enableCheckbox:false, //this needs to multiple or it will set element to multiple
		checkboxNameSuffix:'_mscheck',
		append:'',
		prepend:'',
		reverseMode:true, //it will update the msdropdown UI/value if you update the original dropdown - will be usefull if are using knockout.js or playing with original dropdown
		roundedCorner:true,
		enableAutoFilter:true,
		on: {create: null,open: null,close: null,add: null,remove: null,change: null,blur: null,click: null,dblclick: null,mousemove: null,mouseover: null,mouseout: null,focus: null,mousedown: null,mouseup: null}
		}, settings);								  
	var $this = this; //this class	 
	var holderId = {postElementHolder: '_msddHolder', postID: '_msdd', postTitleID: '_title',postTitleTextID: '_titleText', postChildID: '_child'};
	var css = {dd:settings.mainCSS, ddTitle: 'ddTitle', arrow: 'ddArrow arrowoff', ddChild: 'ddChild', ddTitleText: 'ddTitleText',disabled: 'disabled', enabled: 'enabled', ddOutOfVision: 'ddOutOfVision', borderTop: 'borderTop', noBorderTop: 'noBorderTop', selected: 'selected', divider: 'divider', optgroup: "optgroup", optgroupTitle: "optgroupTitle", description: "description", label: "ddlabel",hover: 'hover',disabledAll: 'disabledAll'};
	var css_i = {li: '_msddli_',borderRadiusTp: 'borderRadiusTp',ddChildMore: 'border shadow',fnone: "fnone"};
	var isList = false, isMultiple=false,isDisabled=false, cacheElement = {}, element, orginial = {}, isOpen=false;
	var DOWN_ARROW = 40, UP_ARROW = 38, LEFT_ARROW=37, RIGHT_ARROW=39, ESCAPE = 27, ENTER = 13, ALPHABETS_START = 47, SHIFT=16, CONTROL = 17, BACKSPACE=8, DELETE=46;
	var shiftHolded=false, controlHolded=false,lastTarget=null,forcedTrigger=false, oldSelected, isCreated = false;
	var doc = document, ua = window.navigator.userAgent, isIE = ua.match(/msie/i);
	settings.reverseMode = settings.reverseMode.toString();
	settings.roundedCorner = settings.roundedCorner.toString();
	var isArray = function(obj) {
		return (Object.prototype.toString.call(obj)=="[object Array]") ? true : false;
	};
	var msieversion = function()
   	{      
      var msie = ua.indexOf("MSIE");
      if ( msie > 0 ) {      // If Internet Explorer, return version number
         return parseInt (ua.substring (msie+5, ua.indexOf (".", msie)));
	  } else {                // If another browser, return 0
         return 0;
	  };
   	};
	var checkDataSetting = function() {
		settings.mainCSS = $("#"+element).data("maincss") || settings.mainCSS;
		settings.visibleRows = $("#"+element).data("visiblerows") || settings.visibleRows;
		if($("#"+element).data("showicon")==false) {settings.showIcon = $("#"+element).data("showicon");};
		settings.useSprite = $("#"+element).data("usesprite") || settings.useSprite;
		settings.animStyle = $("#"+element).data("animstyle") || settings.animStyle;
		settings.event = $("#"+element).data("event") || settings.event;
		settings.openDirection = $("#"+element).data("opendirection") || settings.openDirection;
		settings.jsonTitle = $("#"+element).data("jsontitle") || settings.jsonTitle;
		settings.disabledOpacity = $("#"+element).data("disabledopacity") || settings.disabledOpacity;
		settings.childWidth = $("#"+element).data("childwidth") || settings.childWidth;
		settings.enableCheckbox = $("#"+element).data("enablecheckbox") || settings.enableCheckbox;
		settings.checkboxNameSuffix = $("#"+element).data("checkboxnamesuffix") || settings.checkboxNameSuffix;
		settings.append = $("#"+element).data("append") || settings.append;
		settings.prepend = $("#"+element).data("prepend") || settings.prepend;
		settings.reverseMode = $("#"+element).data("reversemode") || settings.reverseMode;
		settings.roundedCorner = $("#"+element).data("roundedcorner") || settings.roundedCorner;
		settings.enableAutoFilter = $("#"+element).data("enableautofilter") || settings.enableAutoFilter;
		
		//make string
		settings.reverseMode = settings.reverseMode.toString();
		settings.roundedCorner = settings.roundedCorner.toString();
		settings.enableAutoFilter = settings.enableAutoFilter.toString();
	};	
	var getElement = function(ele) {
		if (cacheElement[ele] === undefined) {
			cacheElement[ele] = doc.getElementById(ele);
		}
		return cacheElement[ele];
	}; 	
	var getIndex = function(opt) {
		var childid = getPostID("postChildID"); 
		return $("#"+childid + " li."+css_i.li).index(opt);
	};
	var createByJson = function() {
		if (settings.byJson.data) {
				var validData = ["description","image","title"];
				try {
					if (!element.id) {
						element.id = "dropdown"+msBeautify.counter;
					};
					settings.byJson.data = eval(settings.byJson.data);
					//change element
					var id = "msdropdown"+(msBeautify.counter++);
					var obj = {};
					obj.id = id;
					obj.name = settings.byJson.name || element.id; //its name
					if (settings.byJson.size>0) {
						obj.size = settings.byJson.size;
					};
					obj.multiple = settings.byJson.multiple;
					var oSelect = createElement("select", obj);
					for(var i=0;i<settings.byJson.data.length;i++) {
						var current = settings.byJson.data[i];
						var opt = new Option(current.text, current.value);
						for(var p in current) { 
							if (p.toLowerCase() != 'text') { 
								var key = ($.inArray(p.toLowerCase(), validData)!=-1) ? "data-" : "";
								opt.setAttribute(key+p, current[p]);
							};
						};
						oSelect.options[i] = opt;
					};
					getElement(element.id).appendChild(oSelect);
					oSelect.selectedIndex = settings.byJson.selectedIndex;
					$(oSelect).css({width: settings.byJson.width+'px'});
					//now change element for access other things
					element = oSelect;
				} catch(e) {
					throw "There is an error in json data.";
				};
		};			
	};
	var init = function() {		
		 //set properties
		 createByJson();
		if (!element.id) {
			element.id = "msdrpdd"+(msBeautify.counter++);
		};						
		element = element.id;
		$this.element = element;
		checkDataSetting();		
		isDisabled = getElement(element).disabled;
		var useCheckbox = settings.enableCheckbox;
		if(useCheckbox.toString()==="true") {
			getElement(element).multiple = true;
			settings.enableCheckbox = true;
		};
		isList = (getElement(element).size>1 || getElement(element).multiple==true) ? true : false;
		//trace("isList "+isList);
		if (isList) {isMultiple = getElement(element).multiple;};			
		mergeAllProp();		
		//create layout
		createLayout();		
		//set ui prop
		updateProp("uiData", getDataAndUI());
		updateProp("selectedOptions", $("#"+element +" option:selected"));
		var childid = getPostID("postChildID");
		oldSelected = $("#" + childid + " li." + css.selected);
		
		if(settings.reverseMode==="true") {
			$("#"+element).on("change", function() {
				setValue(this.selectedIndex);
			});
		};
		//add refresh method
		getElement(element).refresh = function(e) {
			 $("#"+element).msDropdown().data("dd").refresh();
		};

	 };	
	 /********************************************************************************************/	
	var getPostID = function (id) {
		return element+holderId[id];
	};
	var getInternalStyle = function(ele) {		 
		 var s = (ele.style === undefined) ? "" : ele.style.cssText;
		 return s;
	};
	var parseOption = function(opt) {
		var imagePath = '', title ='', description='', value=-1, text='', className='', imagecss = '', index;
		if (opt !== undefined) {
			var attrTitle = opt.title || "";
			//data-title
			if (attrTitle!="") {
				var reg = /^\{.*\}$/;
				var isJson = reg.test(attrTitle);
				if (isJson && settings.jsonTitle) {
					var obj =  eval("["+attrTitle+"]");	
				};				 
				title = (isJson && settings.jsonTitle) ? obj[0].title : title;
				description = (isJson && settings.jsonTitle) ? obj[0].description : description;
				imagePath = (isJson && settings.jsonTitle) ? obj[0].image : attrTitle;
				imagecss = (isJson && settings.jsonTitle) ? obj[0].imagecss : imagecss;
				index = opt.index;
			};

			text = opt.text || '';
			value = opt.value || '';
			className = opt.className || "";
			//ignore title attribute if playing with data tags
			title = $(opt).prop("data-title") || $(opt).data("title") || (title || "");
			description = $(opt).prop("data-description") || $(opt).data("description") || (description || "");
			imagePath = $(opt).prop("data-image") || $(opt).data("image") || (imagePath || "");
			imagecss = $(opt).prop("data-imagecss") || $(opt).data("imagecss") || (imagecss || "");
			index = $(opt).index();
		};
		var o = {image: imagePath, title: title, description: description, value: value, text: text, className: className, imagecss:imagecss, index:index};
		return o;
	};	 
	var createElement = function(nm, attr, html) {
		var tag = doc.createElement(nm);
		if (attr) {
		 for(var i in attr) {
			 switch(i) {
				 case "style":
					tag.style.cssText = attr[i];
				 break;
				 default:
					tag[i]  = attr[i];
				 break;
			 };	
		 };
		};
		if (html) {
		 tag.innerHTML = html;
		};
		return tag;
	};
	 /********************************************************************************************/
	  /*********************** <layout> *************************************/
	var hideOriginal = function() {
		var hidid = getPostID("postElementHolder");
		if ($("#"+hidid).length==0) {			 
			var obj = {style: 'height: 0px;overflow: hidden;position: absolute;',className: css.ddOutOfVision};	
			obj.id = hidid;
			var oDiv = createElement("div", obj);	
			$("#"+element).after(oDiv);
			$("#"+element).appendTo($("#"+hidid));
		} else {
			$("#"+hidid).css({height: 0,overflow: 'hidden',position: 'absolute'});
		};
		getElement(element).tabIndex = -1;
	};
	var createWrapper = function () {
		var brdRds = (settings.roundedCorner == "true") ? " borderRadius" : "";
		var obj = {
			className: css.dd + " ddcommon"+brdRds
		};
		var intcss = getInternalStyle(getElement(element));
		var w = $("#" + element).outerWidth();
		obj.style = "width: " + w + "px;";
		if (intcss.length > 0) {
			obj.style = obj.style + "" + intcss;
		};
		obj.id = getPostID("postID");
		obj.tabIndex = getElement(element).tabIndex;
		var oDiv = createElement("div", obj);
		return oDiv;
	};
	var createTitle = function () {
		var selectedOption;
		if(getElement(element).selectedIndex>=0) {
			selectedOption = getElement(element).options[getElement(element).selectedIndex];
		} else {
			selectedOption = {value:'', text:''};
		}
		var spriteClass = "", selectedClass = "";
		//check sprite
		var useSprite = $("#"+element).data("usesprite");
		if(useSprite) { settings.useSprite = useSprite; };
		if (settings.useSprite != false) {
			spriteClass = " " + settings.useSprite;
			selectedClass = " " + selectedOption.className;
		};
		var brdRdsTp = (settings.roundedCorner == "true") ? " "+css_i.borderRadiusTp : "" ;
		var oTitle = createElement("div", {className: css.ddTitle + spriteClass + brdRdsTp});
		//divider
		var oDivider = createElement("span", {className: css.divider});
		//arrow
		var oArrow = createElement("span", {className: css.arrow});
		//title Text
		var titleid = getPostID("postTitleID");
		var oTitleText = createElement("span", {className: css.ddTitleText + selectedClass, id: titleid});
	
		var parsed = parseOption(selectedOption);
		var arrowPath = parsed.image;
		var sText = parsed.text || "";		
		if (arrowPath != "" && settings.showIcon) {
			var oIcon = createElement("img");
			oIcon.src = arrowPath;
			if(parsed.imagecss!="") {
				oIcon.className = parsed.imagecss+" ";
			};
		};
		var oTitleText_in = createElement("span", {className: css.label}, sText);
		oTitle.appendChild(oDivider);
		oTitle.appendChild(oArrow);
		if (oIcon) {
			oTitleText.appendChild(oIcon);
		};
		oTitleText.appendChild(oTitleText_in);
		oTitle.appendChild(oTitleText);
		var oDescription = createElement("span", {className: css.description}, parsed.description);
		oTitleText.appendChild(oDescription);
		return oTitle;
	};
	var createFilterBox = function () {
		var tid = getPostID("postTitleTextID");
		var brdRds = (settings.roundedCorner == "true") ? "borderRadius" : "";
		var sText = createElement("input", {id: tid, type: 'text', value: '', autocomplete: 'off', className: 'text shadow '+brdRds, style: 'display: none'});
		return sText;
	};
	var createChild = function (opt) {
		var obj = {};
		var intcss = getInternalStyle(opt);
		if (intcss.length > 0) {obj.style = intcss; };
		var css2 = (opt.disabled) ? css.disabled : css.enabled;
		css2 = (opt.selected) ? (css2 + " " + css.selected) : css2;
		css2 = css2 + " " + css_i.li;
		obj.className = css2;
		if (settings.useSprite != false) {
			obj.className = css2 + " " + opt.className;
		};
		var li = createElement("li", obj);
		var parsed = parseOption(opt);
		if (parsed.title != "") {
			li.title = parsed.title;
		};
		var arrowPath = parsed.image;
		if (arrowPath != "" && settings.showIcon) {
			var oIcon = createElement("img");
			oIcon.src = arrowPath;
			if(parsed.imagecss!="") {
				oIcon.className = parsed.imagecss+" ";
			};
		};
		if (parsed.description != "") {
			var oDescription = createElement("span", {
				className: css.description
			}, parsed.description);
		};
		var sText = opt.text || "";
		var oTitleText = createElement("span", {
			className: css.label
		}, sText);
		//checkbox
		if(settings.enableCheckbox===true) {
			var chkbox = createElement("input", {
			type: 'checkbox', name:element+settings.checkboxNameSuffix+'[]', value:opt.value||"", className:"checkbox"}); //this can be used for future
			li.appendChild(chkbox);
			if(settings.enableCheckbox===true) {
				chkbox.checked = (opt.selected) ? true : false;
			};
		};
		if (oIcon) {
			li.appendChild(oIcon);
		};
		li.appendChild(oTitleText);
		if (oDescription) {
			li.appendChild(oDescription);
		} else {
			if (oIcon) {
				oIcon.className = oIcon.className+css_i.fnone;
			};
		};
		var oClear = createElement("div", {className: 'clear'});
		li.appendChild(oClear);
		return li;
	};
	var createChildren = function () {
		var childid = getPostID("postChildID");
		var obj = {className: css.ddChild + " ddchild_ " + css_i.ddChildMore, id: childid};
		if (isList == false) {
			obj.style = "z-index: " + settings.zIndex;
		} else {
			obj.style = "z-index:1";
		};
		var childWidth = $("#"+element).data("childwidth") || settings.childWidth;
		if(childWidth) {
			obj.style =  (obj.style || "") + ";width:"+childWidth;
		};		
		var oDiv = createElement("div", obj);
		var ul = createElement("ul");
		if (settings.useSprite != false) {
			ul.className = settings.useSprite;
		};
		var allOptions = getElement(element).children;
		for (var i = 0; i < allOptions.length; i++) {
			var current = allOptions[i];
			var li;
			if (current.nodeName.toLowerCase() == "optgroup") {
				//create ul
				li = createElement("li", {className: css.optgroup});
				var span = createElement("span", {className: css.optgroupTitle}, current.label);
				li.appendChild(span);
				var optChildren = current.children;
				var optul = createElement("ul");
				for (var j = 0; j < optChildren.length; j++) {
					var opt_li = createChild(optChildren[j]);
					optul.appendChild(opt_li);
				};
				li.appendChild(optul);
			} else {
				li = createChild(current);
			};
			ul.appendChild(li);
		};
		oDiv.appendChild(ul);		
		return oDiv;
	};
	var childHeight = function (val) {
		var childid = getPostID("postChildID");
		if (val) {
			if (val == -1) { //auto
				$("#"+childid).css({height: "auto", overflow: "auto"});
			} else {				
				$("#"+childid).css("height", val+"px");
			};
			return false;
		};
		//else return height
		var iHeight;
		var totalOptions = getElement(element).options.length;
		if (totalOptions > settings.visibleRows || settings.visibleRows) {
			var firstLI = $("#" + childid + " li:first");
			var margin = parseInt(firstLI.css("padding-bottom")) + parseInt(firstLI.css("padding-top"));
			if(settings.rowHeight===0) {
				$("#" + childid).css({visibility:'hidden',display:'block'}); //hack for first child
				settings.rowHeight = Math.ceil(firstLI.height());
				$("#" + childid).css({visibility:'visible'});
				if(!isList || settings.enableCheckbox===true) {
					$("#" + childid).css({display:'none'});
				};
			};
			iHeight = ((settings.rowHeight + margin) * Math.min(settings.visibleRows,totalOptions)) + 3;
		} else if (isList) {
			iHeight = $("#" + element).height(); //get height from original element
		};		
		return iHeight;
	};
	var applyChildEvents = function () {
		var childid = getPostID("postChildID");
		$("#" + childid).on("click", function (e) {
			if (isDisabled === true) return false;
			//prevent body click
			e.preventDefault();
			e.stopPropagation();
			if (isList) {
				bind_on_events();
			};
		});
		$("#" + childid + " li." + css.enabled).on("click", function (e) {
			if(e.target.nodeName.toLowerCase() !== "input") {
				close(this);
			};
		});
		$("#" + childid + " li." + css.enabled).on("mousedown", function (e) {
			if (isDisabled === true) return false;
			oldSelected = $("#" + childid + " li." + css.selected);
			lastTarget = this;
			e.preventDefault();
			e.stopPropagation();
			//select current input
			if(settings.enableCheckbox===true) {
				if(e.target.nodeName.toLowerCase() === "input") {
					controlHolded = true;
				};	
			};
			if (isList === true) {
				if (isMultiple) {					
					if (shiftHolded === true) {
						$(this).addClass(css.selected);
						var selected = $("#" + childid + " li." + css.selected);
						var lastIndex = getIndex(this);
						if (selected.length > 1) {
							var items = $("#" + childid + " li." + css_i.li);
							var ind1 = getIndex(selected[0]);
							var ind2 = getIndex(selected[1]);
							if (lastIndex > ind2) {
								ind1 = (lastIndex);
								ind2 = ind2 + 1;
							};
							for (var i = Math.min(ind1, ind2); i <= Math.max(ind1, ind2); i++) {
								var current = items[i];
								if ($(current).hasClass(css.enabled)) {
									$(current).addClass(css.selected);
								};
							};
						};
					} else if (controlHolded === true) {
						$(this).toggleClass(css.selected); //toggle
						if(settings.enableCheckbox===true) {
							var checkbox = this.childNodes[0];
							checkbox.checked = !checkbox.checked; //toggle
						};
					} else {
						$("#" + childid + " li." + css.selected).removeClass(css.selected);
						$("#" + childid + " input:checkbox").prop("checked", false);
						$(this).addClass(css.selected);
						if(settings.enableCheckbox===true) {
							this.childNodes[0].checked = true;
						};
					};					
				} else {
					$("#" + childid + " li." + css.selected).removeClass(css.selected);
					$(this).addClass(css.selected);
				};
				//fire event on mouseup
			} else {
				$("#" + childid + " li." + css.selected).removeClass(css.selected);
				$(this).addClass(css.selected);
			};		
		});
		$("#" + childid + " li." + css.enabled).on("mouseenter", function (e) {
			if (isDisabled === true) return false;
			e.preventDefault();
			e.stopPropagation();
			if (lastTarget != null) {
				if (isMultiple) {
					$(this).addClass(css.selected);
					if(settings.enableCheckbox===true) {
						this.childNodes[0].checked = true;
					};
				};
			};
		});
	
		$("#" + childid + " li." + css.enabled).on("mouseover", function (e) {
			if (isDisabled === true) return false;
			$(this).addClass(css.hover);
		});
		$("#" + childid + " li." + css.enabled).on("mouseout", function (e) {
			if (isDisabled === true) return false;
			$("#" + childid + " li." + css.hover).removeClass(css.hover);
		});
	
		$("#" + childid + " li." + css.enabled).on("mouseup", function (e) {
			if (isDisabled === true) return false;
			e.preventDefault();
			e.stopPropagation();
			if(settings.enableCheckbox===true) {
				controlHolded = false;
			};
			var selected = $("#" + childid + " li." + css.selected).length;			
			forcedTrigger = (oldSelected.length != selected || selected == 0) ? true : false;	
			fireAfterItemClicked();
			unbind_on_events(); //remove old one
			bind_on_events();
			lastTarget = null;
		});
	
		/* options events */
		if (settings.disabledOptionEvents == false) {
			$("#" + childid + " li." + css_i.li).on("click", function (e) {
				if (isDisabled === true) return false;
				fireOptionEventIfExist(this, "click");
			});
			$("#" + childid + " li." + css_i.li).on("mouseenter", function (e) {
				if (isDisabled === true) return false;
				fireOptionEventIfExist(this, "mouseenter");
			});
			$("#" + childid + " li." + css_i.li).on("mouseover", function (e) {
				if (isDisabled === true) return false;
				fireOptionEventIfExist(this, "mouseover");
			});
			$("#" + childid + " li." + css_i.li).on("mouseout", function (e) {
				if (isDisabled === true) return false;
				fireOptionEventIfExist(this, "mouseout");
			});
			$("#" + childid + " li." + css_i.li).on("mousedown", function (e) {
				if (isDisabled === true) return false;
				fireOptionEventIfExist(this, "mousedown");
			});
			$("#" + childid + " li." + css_i.li).on("mouseup", function (e) {
				if (isDisabled === true) return false;
				fireOptionEventIfExist(this, "mouseup");
			});
		};
	};
	var removeChildEvents = function () {
		var childid = getPostID("postChildID");
		$("#" + childid).off("click");
		$("#" + childid + " li." + css.enabled).off("mouseenter");
		$("#" + childid + " li." + css.enabled).off("click");
		$("#" + childid + " li." + css.enabled).off("mouseover");
		$("#" + childid + " li." + css.enabled).off("mouseout");
		$("#" + childid + " li." + css.enabled).off("mousedown");
		$("#" + childid + " li." + css.enabled).off("mouseup");
	};
	var triggerBypassingHandler = function (id, evt_n, handler) {
		$("#" + id).off(evt_n, handler);
		$("#" + id).trigger(evt_n);
		$("#" + id).on(evt_n, handler);
	};
	var applyEvents = function () {
		var id = getPostID("postID");
		var tid = getPostID("postTitleTextID");
		var childid = getPostID("postChildID");		
		$("#" + id).on(settings.event, function (e) {			
			if (isDisabled === true) return false;
			fireEventIfExist(settings.event);
			//prevent body click
			e.preventDefault();
			e.stopPropagation();
			open(e);
		});
		$("#" + id).on("keydown", function (e) {
			var k = e.which;
			if (!isOpen && (k == ENTER || k == UP_ARROW || k == DOWN_ARROW ||
				k == LEFT_ARROW || k == RIGHT_ARROW ||
				(k >= ALPHABETS_START && !isList))) {
				open(e);
				if (k >= ALPHABETS_START) {
					showFilterBox();
				} else {
					e.preventDefault();
					e.stopImmediatePropagation();
				};
			};
		});
		$("#" + id).on("focus", wrapperFocusHandler);
		$("#" + id).on("blur", wrapperBlurHandler);
		$("#" + tid).on("blur", function (e) {
			//return focus to the wrapper without triggering the handler
			triggerBypassingHandler(id, "focus", wrapperFocusHandler);
		});
		applyChildEvents();		
		$("#" + id).on("dblclick", on_dblclick);
		$("#" + id).on("mousemove", on_mousemove);
		$("#" + id).on("mouseenter", on_mouseover);
		$("#" + id).on("mouseleave", on_mouseout);
		$("#" + id).on("mousedown", on_mousedown);
		$("#" + id).on("mouseup", on_mouseup);
	};
	var wrapperFocusHandler = function (e) {
		fireEventIfExist("focus");
	};
	var wrapperBlurHandler = function (e) {
		fireEventIfExist("blur");
	};
	//after create
	var fixedForList = function () {
		var id = getPostID("postID");
		var childid = getPostID("postChildID");		
		if (isList === true && settings.enableCheckbox===false) {
			$("#" + id + " ." + css.ddTitle).hide();
			$("#" + childid).css({display: 'block', position: 'relative'});	
			//open();
		} else {
			if(settings.enableCheckbox===false) {
				isMultiple = false; //set multiple off if this is not a list
			};
			$("#" + id + " ." + css.ddTitle).show();
			$("#" + childid).css({display: 'none', position: 'absolute'});
			//set value
			var first = $("#" + childid + " li." + css.selected)[0];
			$("#" + childid + " li." + css.selected).removeClass(css.selected);
			var index = getIndex($(first).addClass(css.selected));
			setValue(index);
		};
		childHeight(childHeight()); //get and set height 
	};
	var fixedForDisabled = function () {
		var id = getPostID("postID");
		var opc = (isDisabled == true) ? settings.disabledOpacity : 1;
		if (isDisabled === true) {
			$("#" + id).addClass(css.disabledAll);
		} else {
			$("#" + id).removeClass(css.disabledAll);
		};
	};
	var fixedSomeUI = function () {
		//auto filter
		var tid = getPostID("postTitleTextID");
		if(settings.enableAutoFilter=="true") {
			$("#" + tid).on("keyup", applyFilters);
		};
		//if is list
		fixedForList();
		fixedForDisabled();
	};
	var createLayout = function () {		
		var oDiv = createWrapper();
		var oTitle = createTitle();
		oDiv.appendChild(oTitle);
		//auto filter box
		var oFilterBox = createFilterBox();
		oDiv.appendChild(oFilterBox);
	
		var oChildren = createChildren();
		oDiv.appendChild(oChildren);
		$("#" + element).after(oDiv);
		hideOriginal(); //hideOriginal
		fixedSomeUI();
		applyEvents();
		
		var childid = getPostID("postChildID");
		//append
		if(settings.append!='') {
			$("#" + childid).append(settings.append);
		};
		//prepend
		if(settings.prepend!='') {
			$("#" + childid).prepend(settings.prepend);
		};		
		if (typeof settings.on.create == "function") {
			settings.on.create.apply($this, arguments);
		};
	};
	var selectUI_LI = function(indexes) {
		var childid = getPostID("postChildID");
		$("#" + childid + " li." + css_i.li).removeClass(css.selected);
		if(settings.enableCheckbox===true) {
			$("#" + childid + " li." + css_i.li + " input.checkbox").prop("checked", false);
		};
		if(isArray(indexes)===true) {
			for(var i=0;i<indexes.length;i++) {
				updateNow(indexes[i]);
			};
		} else {
			updateNow(indexes);
		};
		function updateNow(index) {
			$($("#" + childid + " li." + css_i.li)[index]).addClass(css.selected);
			if(settings.enableCheckbox===true) {
				$($("#" + childid + " li." + css_i.li)[index]).find("input.checkbox").prop("checked", "checked");
			};
			
		};
	};
	var selectMutipleOptions = function (bySelected, useIndexes) {
		var childid = getPostID("postChildID");
		var selected = bySelected || $("#" + childid + " li." + css.selected); //bySelected or by argument
		for (var i = 0; i < selected.length; i++) {
			var ind = (useIndexes===true) ? selected[i]  : getIndex(selected[i]);
			getElement(element).options[ind].selected = "selected";
		};
		setValue(selected);
	};
	var fireAfterItemClicked = function () {
		//console.log("fireAfterItemClicked")
		var childid = getPostID("postChildID");
		var selected = $("#" + childid + " li." + css.selected);		
		if (isMultiple && (shiftHolded || controlHolded) || forcedTrigger) {
			getElement(element).selectedIndex = -1; //reset old
		};
		var index;
		if (selected.length == 0) {
			index = -1;
		} else if (selected.length > 1) {
			//selected multiple
			selectMutipleOptions(selected);
		} else {
			//if one selected
			index = getIndex($("#" + childid + " li." + css.selected));
		};		
		if ((getElement(element).selectedIndex != index || forcedTrigger) && selected.length<=1) {			
			forcedTrigger = false;			
			var evt = has_handler("change");
			getElement(element).selectedIndex = index;	
			setValue(index);
			//local
			if (typeof settings.on.change == "function") {
				var d = getDataAndUI();
				settings.on.change(d.data, d.ui);
			};			
			$("#" + element).trigger("change");			
		};
	};
	var setValue = function (index, byvalue) {
		if (index !== undefined) {
			var selectedIndex, value, selectedText;
			if (index == -1) {
				selectedIndex = -1;
				value = "";
				selectedText = "";
				updateTitleUI(-1);
			} else {
				//by index or byvalue
				if (typeof index != "object") {
					var opt = getElement(element).options[index];
					getElement(element).selectedIndex = index;
					selectedIndex = index;
					value = parseOption(opt);
					selectedText = (index >= 0) ? getElement(element).options[index].text : "";
					updateTitleUI(undefined, value);
					value = value.value; //for bottom
				} else {
					//this is multiple or by option
					selectedIndex = (byvalue && byvalue.index) || getElement(element).selectedIndex;
					value = (byvalue && byvalue.value) || getElement(element).value;
					selectedText = (byvalue && byvalue.text) || getElement(element).options[getElement(element).selectedIndex].text || "";
					updateTitleUI(selectedIndex);
					//check if this is multiple checkbox					
				};
			};			
			updateProp("selectedIndex", selectedIndex);
			updateProp("value", value);
			updateProp("selectedText", selectedText);
			updateProp("children", getElement(element).children);
			updateProp("uiData", getDataAndUI());
			updateProp("selectedOptions", $("#" + element + " option:selected"));
		};
	};
	var has_handler = function (name) {
		//True if a handler has been added in the html.
		var evt = {byElement: false, byJQuery: false, hasEvent: false};
		var obj = $("#" + element);
		//console.log(name)
		try {
			//console.log(obj.prop("on" + name) + " "+name);
			if (obj.prop("on" + name) !== null) {
				evt.hasEvent = true;
				evt.byElement = true;
			};
		} catch(e) {
			//console.log(e.message);
		}
		// True if a handler has been added using jQuery.
		var evs;
		if (typeof $._data == "function") { //1.8
			evs = $._data(obj[0], "events");
		} else {
			evs = obj.data("events");
		};
		if (evs && evs[name]) {
			evt.hasEvent = true;
			evt.byJQuery = true;
		};
		return evt;
	};
	var bind_on_events = function () {
		unbind_on_events();
		$("body").on("click", close);
		//bind more events		 
		$(document).on("keydown", on_keydown);
		$(document).on("keyup", on_keyup);
		//focus will work on this	 		 
	};
	var unbind_on_events = function () {
		$("body").off("click", close);
		//bind more events
		$(document).off("keydown", on_keydown);
		$(document).off("keyup", on_keyup);
	};
	var applyFilters = function (e) {
		if(e.keyCode < ALPHABETS_START && e.keyCode!=BACKSPACE && e.keyCode!=DELETE) {
			return false;
		};
		var childid = getPostID("postChildID");
		var tid = getPostID("postTitleTextID");
		var sText = getElement(tid).value;
		if (sText.length == 0) {
			$("#" + childid + " li:hidden").show(); //show if hidden
			childHeight(childHeight());
		} else {
			$("#" + childid + " li").hide();
			var items = $("#" + childid + " li:Contains('" + sText + "')").show();
			if ($("#" + childid + " li:visible").length <= settings.visibleRows) {
				childHeight(-1); //set autoheight
			};
			if (items.length > 0 && !isList || !isMultiple) {
				$("#" + childid + " ." + css.selected).removeClass(css.selected);
				$(items[0]).addClass(css.selected);
			};	
		};		
		if (!isList) {
			adjustOpen();
		};
	};
	var showFilterBox = function () {
		if(settings.enableAutoFilter=="true") {
			var id = getPostID("postID");
			var tid = getPostID("postTitleTextID");
			if ($("#" + tid + ":hidden").length > 0 && controlHolded == false) {
				$("#" + tid + ":hidden").show().val("");
				//blur the wrapper without triggering the handler
				triggerBypassingHandler(id, "blur", wrapperBlurHandler);
				getElement(tid).focus();
			};
		};
	};
	var hideFilterBox = function () {
		var tid = getPostID("postTitleTextID");
		if ($("#" + tid + ":visible").length > 0) {
			$("#" + tid + ":visible").hide();
			getElement(tid).blur();
		};
	};
	var on_keydown = function (evt) {
		var tid = getPostID("postTitleTextID");
		var childid = getPostID("postChildID");
		switch (evt.keyCode) {
			case DOWN_ARROW:
			case RIGHT_ARROW:
				evt.preventDefault();
				evt.stopPropagation();
				//hideFilterBox();
				next();
				break;
			case UP_ARROW:
			case LEFT_ARROW:
				evt.preventDefault();
				evt.stopPropagation();
				//hideFilterBox();
				previous();
				break;
			case ESCAPE:
			case ENTER:
				evt.preventDefault();
				evt.stopPropagation();
				close();
				var selected = $("#" + childid + " li." + css.selected).length;	
				forcedTrigger = (oldSelected.length != selected || selected == 0) ? true : false;				
				fireAfterItemClicked();
				unbind_on_events(); //remove old one				
				lastTarget = null;			
				break;
			case SHIFT:
				shiftHolded = true;
				break;
			case CONTROL:
				controlHolded = true;
				break;
			default:
				if (evt.keyCode >= ALPHABETS_START && isList === false) {
					showFilterBox();
				};
				break;
		};
		if (isDisabled === true) return false;
		fireEventIfExist("keydown");
	};
	var on_keyup = function (evt) {
		switch (evt.keyCode) {
			case SHIFT:
				shiftHolded = false;
				break;
			case CONTROL:
				controlHolded = false;
				break;
		};
		if (isDisabled === true) return false;
		fireEventIfExist("keyup");
	};
	var on_dblclick = function (evt) {
		if (isDisabled === true) return false;
		fireEventIfExist("dblclick");
	};
	var on_mousemove = function (evt) {
		if (isDisabled === true) return false;
		fireEventIfExist("mousemove");
	};
	
	var on_mouseover = function (evt) {
		if (isDisabled === true) return false;
		evt.preventDefault();
		fireEventIfExist("mouseover");
	};
	var on_mouseout = function (evt) {
		if (isDisabled === true) return false;
		evt.preventDefault();
		fireEventIfExist("mouseout");
	};
	var on_mousedown = function (evt) {
		if (isDisabled === true) return false;
		fireEventIfExist("mousedown");
	};
	var on_mouseup = function (evt) {
		if (isDisabled === true) return false;
		fireEventIfExist("mouseup");
	};
	var option_has_handler = function (opt, name) {
		//True if a handler has been added in the html.
		var evt = {byElement: false, byJQuery: false, hasEvent: false};
		if ($(opt).prop("on" + name) != undefined) {
			evt.hasEvent = true;
			evt.byElement = true;
		};
		// True if a handler has been added using jQuery.
		var evs = $(opt).data("events");
		if (evs && evs[name]) {
			evt.hasEvent = true;
			evt.byJQuery = true;
		};
		return evt;
	};
	var fireOptionEventIfExist = function (li, evt_n) {
		if (settings.disabledOptionEvents == false) {
			var opt = getElement(element).options[getIndex(li)];
			//check if original has some
			if (option_has_handler(opt, evt_n).hasEvent === true) {
				if (option_has_handler(opt, evt_n).byElement === true) {
					opt["on" + evt_n]();
				};
				if (option_has_handler(opt, evt_n).byJQuery === true) {
					switch (evt_n) {
						case "keydown":
						case "keyup":
							//key down/up will check later
							break;
						default:
							$(opt).trigger(evt_n);
							break;
					};
				};
				return false;
			};
		};
	};
	var fireEventIfExist = function (evt_n) {
		//local
		if (typeof settings.on[evt_n] == "function") {
			settings.on[evt_n].apply(this, arguments);
		};
		//check if original has some
		if (has_handler(evt_n).hasEvent === true) {
			if (has_handler(evt_n).byElement === true) {
				getElement(element)["on" + evt_n]();
			} else if (has_handler(evt_n).byJQuery === true) {
				switch (evt_n) {
					case "keydown":
					case "keyup":
						//key down/up will check later
						break;
					default:
						$("#" + element).triggerHandler(evt_n);
						break;
				};
			};
			return false;
		};
	};
	/******************************* navigation **********************************************/
	var scrollToIfNeeded = function (opt) {
		var childid = getPostID("postChildID");
		//if scroll is needed
		opt = (opt !== undefined) ? opt : $("#" + childid + " li." + css.selected);
		if (opt.length > 0) {
			var pos = parseInt(($(opt).position().top));
			var ch = parseInt($("#" + childid).height());
			if (pos > ch) {
				var top = pos + $("#" + childid).scrollTop() - (ch/2);
				$("#" + childid).animate({scrollTop:top}, 500);
			};
		};
	};
	var next = function () {
		var childid = getPostID("postChildID");
		var items = $("#" + childid + " li:visible." + css_i.li);
		var selected = $("#" + childid + " li:visible." + css.selected);
		selected = (selected.length==0) ? items[0] : selected;
		var index = $("#" + childid + " li:visible." + css_i.li).index(selected);
		if ((index < items.length - 1)) {
			index = getNext(index);
			if (index < items.length) { //check again - hack for last disabled 
				if (!shiftHolded || !isList || !isMultiple) {
					$("#" + childid + " ." + css.selected).removeClass(css.selected);
				};
				$(items[index]).addClass(css.selected);
				updateTitleUI(index);
				if (isList == true) {
					fireAfterItemClicked();
				};
				scrollToIfNeeded($(items[index]));
			};
			if (!isList) {
				adjustOpen();
			};
		};	
		function getNext(ind) {
			ind = ind + 1;
			if (ind > items.length) {
				return ind;
			};
			if ($(items[ind]).hasClass(css.enabled) === true) {
				return ind;
			};
			return ind = getNext(ind);
		};
	};
	var previous = function () {
		var childid = getPostID("postChildID");
		var selected = $("#" + childid + " li:visible." + css.selected);
		var items = $("#" + childid + " li:visible." + css_i.li);
		var index = $("#" + childid + " li:visible." + css_i.li).index(selected[0]);
		if (index >= 0) {
			index = getPrev(index);
			if (index >= 0) { //check again - hack for disabled 
				if (!shiftHolded || !isList || !isMultiple) {
					$("#" + childid + " ." + css.selected).removeClass(css.selected);
				};
				$(items[index]).addClass(css.selected);
				updateTitleUI(index);
				if (isList == true) {
					fireAfterItemClicked();
				};
				if (parseInt(($(items[index]).position().top + $(items[index]).height())) <= 0) {
					var top = ($("#" + childid).scrollTop() - $("#" + childid).height()) - $(items[index]).height();
					$("#" + childid).animate({scrollTop: top}, 500);
				};
			};
			if (!isList) {
				adjustOpen();
			};
		};
	
		function getPrev(ind) {
			ind = ind - 1;
			if (ind < 0) {
				return ind;
			};
			if ($(items[ind]).hasClass(css.enabled) === true) {
				return ind;
			};
			return ind = getPrev(ind);
		};
	};
	var adjustOpen = function () {
		var id = getPostID("postID");
		var childid = getPostID("postChildID");
		var pos = $("#" + id).offset();
		var mH = $("#" + id).height();
		var wH = $(window).height();
		var st = $(window).scrollTop();
		var cH = $("#" + childid).height();
		var top = $("#" + id).height(); //this close so its title height
		var direction = settings.openDirection.toLowerCase();
		if (((wH + st) < Math.floor(cH + mH + pos.top) || direction == 'alwaysup') && direction != 'alwaysdown') {
			top = cH;
			$("#" + childid).css({top: "-" + top + "px", display: 'block', zIndex: settings.zIndex});			
			if(settings.roundedCorner == "true") {
				$("#" + id).removeClass("borderRadius borderRadiusTp").addClass("borderRadiusBtm");
			};
			var top = $("#" + childid).offset().top;
			if (top < -10) {
				$("#" + childid).css({top: (parseInt($("#" + childid).css("top")) - top + 20 + st) + "px", zIndex: settings.zIndex});
				if(settings.roundedCorner == "true") {
					$("#" + id).removeClass("borderRadiusBtm borderRadiusTp").addClass("borderRadius");
				};
			};
		} else {
			$("#" + childid).css({top: top + "px", zIndex: settings.zIndex});			
			if(settings.roundedCorner == "true") {
				$("#" + id).removeClass("borderRadius borderRadiusBtm").addClass("borderRadiusTp");
			};
		};
		//hack for ie zindex
		//i hate ie :D
		if(isIE) {
			if(msieversion()<=7) {
				$('div.ddcommon').css("zIndex", settings.zIndex-10);
				$("#" + id).css("zIndex", settings.zIndex+5);
			};
		};		
	};
	var open = function (e) {
		if (isDisabled === true) return false;
		var id = getPostID("postID");
		var childid = getPostID("postChildID");
		if (!isOpen) {
			isOpen = true;
			if (msBeautify.oldDiv != '') {
				$("#" + msBeautify.oldDiv).css({display: "none"}); //hide all 
			};
			msBeautify.oldDiv = childid;
			$("#" + childid + " li:hidden").show(); //show if hidden
			adjustOpen();
			var animStyle = settings.animStyle;
			if(animStyle=="" || animStyle=="none") {
				$("#" + childid).css({display:"block"});
				scrollToIfNeeded();
				if (typeof settings.on.open == "function") {
					var d = getDataAndUI();
					settings.on.open(d.data, d.ui);
				};
			} else {				
				$("#" + childid)[animStyle]("fast", function () {
					scrollToIfNeeded();
					if (typeof settings.on.open == "function") {
						var d = getDataAndUI();
						settings.on.open(d.data, d.ui);
					};
				});
			};
			bind_on_events();
		} else {
			if(settings.event!=='mouseover') {
				close();
			};
		};
	};
	var close = function (e) {
		isOpen = false;
		var id = getPostID("postID");
		var childid = getPostID("postChildID");
		if (isList === false || settings.enableCheckbox===true) {
			$("#" + childid).css({display: "none"});			
			if(settings.roundedCorner == "true") {
				$("#" + id).removeClass("borderRadiusTp borderRadiusBtm").addClass("borderRadius");
			};
		};
		unbind_on_events();
		if (typeof settings.on.close == "function") {
			var d = getDataAndUI();
			settings.on.close(d.data, d.ui);
		};
		//rest some old stuff
		hideFilterBox();
		childHeight(childHeight()); //its needed after filter applied
		$("#" + childid).css({zIndex:1});
		//update the title in case the user clicked outside
		updateTitleUI(getElement(element).selectedIndex);
	};
	/*********************** </layout> *************************************/	
	var mergeAllProp = function () {
		try {
			orginial = $.extend(true, {}, getElement(element));
			for (var i in orginial) {
				if (typeof orginial[i] != "function") {				
					$this[i] = orginial[i]; //properties
				};
			};
		} catch(e) {
			//silent
		};
		$this.selectedText = (getElement(element).selectedIndex >= 0) ? getElement(element).options[getElement(element).selectedIndex].text : "";		
		$this.version = msBeautify.version.msDropdown;
		$this.author = msBeautify.author;
	};
	var getDataAndUIByOption = function (opt) {
		if (opt != null && typeof opt != "undefined") {
			var childid = getPostID("postChildID");
			var data = parseOption(opt);
			var ui = $("#" + childid + " li." + css_i.li + ":eq(" + (opt.index) + ")");
			return {data: data, ui: ui, option: opt, index: opt.index};
		};
		return null;
	};
	var getDataAndUI = function () {
		var childid = getPostID("postChildID");
		var ele = getElement(element);
		var data, ui, option, index;
		if (ele.selectedIndex == -1) {
			data = null;
			ui = null;
			option = null;
			index = -1;
		} else {
			ui = $("#" + childid + " li." + css.selected);
			if (ui.length > 1) {
				var d = [], op = [], ind = [];
				for (var i = 0; i < ui.length; i++) {
					var pd = getIndex(ui[i]);
					d.push(pd);
					op.push(ele.options[pd]);
				};
				data = d;
				option = op;
				index = d;
			} else {
				option = ele.options[ele.selectedIndex];
				data = parseOption(option);
				index = ele.selectedIndex;
			};
		};
		return {data: data, ui: ui, index: index, option: option};
	};
	var updateTitleUI = function (index, byvalue) {
		var titleid = getPostID("postTitleID");
		var value = {};
		if (index == -1) {
			value.text = "&nbsp;";
			value.className = "";
			value.description = "";
			value.image = "";
		} else if (typeof index != "undefined") {
			var opt = getElement(element).options[index];
			value = parseOption(opt);
		} else {
			value = byvalue;
		};
		//update title and current
		$("#" + titleid).find("." + css.label).html(value.text);
		getElement(titleid).className = css.ddTitleText + " " + value.className;
		//update desction
		if (value.description != "") {
			$("#" + titleid).find("." + css.description).html(value.description).show();
		} else {
			$("#" + titleid).find("." + css.description).html("").hide();
		};
		//update icon
		var img = $("#" + titleid).find("img");
		if (img.length > 0) {
			$(img).remove();
		};
		if (value.image != "" && settings.showIcon) {
			img = createElement("img", {src: value.image});
			$("#" + titleid).prepend(img);
			if(value.imagecss!="") {
				img.className = value.imagecss+" ";
			};
			if (value.description == "") {
				img.className = img.className+css_i.fnone;
			};
		};
	};
	var updateProp = function (p, v) {
		$this[p] = v;
	};
	var updateUI = function (a, opt, i) { //action, index, opt
		var childid = getPostID("postChildID");
		var wasSelected = false;
		switch (a) {
			case "add":
				var li = createChild(opt || getElement(element).options[i]);				
				var index;
				if (arguments.length == 3) {
					index = i;
				} else {
					index = $("#" + childid + " li." + css_i.li).length - 1;
				};				
				if (index < 0 || !index) {
					$("#" + childid + " ul").append(li);
				} else {
					var at = $("#" + childid + " li." + css_i.li)[index];
					$(at).before(li);
				};
				removeChildEvents();
				applyChildEvents();
				if (settings.on.add != null) {
					settings.on.add.apply(this, arguments);
				};
				break;
			case "remove":
				wasSelected = $($("#" + childid + " li." + css_i.li)[i]).hasClass(css.selected);
				$("#" + childid + " li." + css_i.li + ":eq(" + i + ")").remove();
				var items = $("#" + childid + " li." + css.enabled);
				if (wasSelected == true) {
					if (items.length > 0) {
						$(items[0]).addClass(css.selected);
						var ind = $("#" + childid + " li." + css_i.li).index(items[0]);
						setValue(ind);
					};
				};
				if (items.length == 0) {
					setValue(-1);
				};
				if ($("#" + childid + " li." + css_i.li).length < settings.visibleRows && !isList) {
					childHeight(-1); //set autoheight
				};
				if (settings.on.remove != null) {
					settings.on.remove.apply(this, arguments);
				};
				break;
		};	
	};
	/************************** public methods/events **********************/
	this.act = function () {
		var action = arguments[0];
		Array.prototype.shift.call(arguments);
		switch (action) {
			case "add":
				$this.add.apply(this, arguments);
				break;
			case "remove":
				$this.remove.apply(this, arguments);
				break;
			default:
				try {
					getElement(element)[action].apply(getElement(element), arguments);
				} catch (e) {
					//there is some error.
				};
				break;
		};
	};
	
	this.add = function () {
		var text, value, title, image, description;
		var obj = arguments[0];		
		if (typeof obj == "string") {
			text = obj;
			value = text;
			opt = new Option(text, value);
		} else {
			text = obj.text || '';
			value = obj.value || text;
			title = obj.title || '';
			image = obj.image || '';
			description = obj.description || '';
			//image:imagePath, title:title, description:description, value:opt.value, text:opt.text, className:opt.className||""
			opt = new Option(text, value);
			$(opt).data("description", description);
			$(opt).data("image", image);
			$(opt).data("title", title);
		};
		arguments[0] = opt; //this option
		getElement(element).add.apply(getElement(element), arguments);
		updateProp("children", getElement(element)["children"]);
		updateProp("length", getElement(element).length);
		updateUI("add", opt, arguments[1]);
	};
	this.remove = function (i) {
		getElement(element).remove(i);
		updateProp("children", getElement(element)["children"]);
		updateProp("length", getElement(element).length);
		updateUI("remove", undefined, i);
	};
	this.set = function (prop, val) {
		if (typeof prop == "undefined" || typeof val == "undefined") return false;
		prop = prop.toString();
		try {
			updateProp(prop, val);
		} catch (e) {/*this is ready only */};
		switch (prop) {
			case "size":
				getElement(element)[prop] = val;
				if (val == 0) {
					getElement(element).multiple = false; //if size is zero multiple should be false
				};
				isList = (getElement(element).size > 1 || getElement(element).multiple == true) ? true : false;
				fixedForList();
				break;
			case "multiple":
				getElement(element)[prop] = val;
				isList = (getElement(element).size > 1 || getElement(element).multiple == true) ? true : false;
				isMultiple = getElement(element).multiple;
				fixedForList();
				updateProp(prop, val);
				break;
			case "disabled":
				getElement(element)[prop] = val;
				isDisabled = val;
				fixedForDisabled();
				break;
			case "selectedIndex":
			case "value":				
				if(prop=="selectedIndex" && isArray(val)===true) {
					$("#"+element +" option").prop("selected", false);
					selectMutipleOptions(val, true);
					selectUI_LI(val); //setValue is being called from selectMutipleOptions
				} else {
					getElement(element)[prop] = val;					
					selectUI_LI(getElement(element).selectedIndex);
					setValue(getElement(element).selectedIndex);
				};
				break;
			case "length":
				var childid = getPostID("postChildID");
				if (val < getElement(element).length) {
					getElement(element)[prop] = val;
					if (val == 0) {
						$("#" + childid + " li." + css_i.li).remove();
						setValue(-1);
					} else {
						$("#" + childid + " li." + css_i.li + ":gt(" + (val - 1) + ")").remove();
						if ($("#" + childid + " li." + css.selected).length == 0) {
							$("#" + childid + " li." + css.enabled + ":eq(0)").addClass(css.selected);
						};
					};
					updateProp(prop, val);
					updateProp("children", getElement(element)["children"]);
				};
				break;
			case "id":
				//please i need this. so preventing to change it. will work on this later
				break;
			default:
				//check if this is not a readonly properties
				try {
					getElement(element)[prop] = val;
					updateProp(prop, val);
				} catch (e) {
					//silent
				};
				break;
		};
	};
	this.get = function (prop) {
		return $this[prop] || getElement(element)[prop]; //return if local else from original
	};
	this.visible = function (val) {
		var id = getPostID("postID");		
		if (val === true) {
			$("#" + id).show();
		} else if (val === false) {
			$("#" + id).hide();
		} else {
			return ($("#" + id).css("display")=="none") ? false : true;
		};
	};
	this.debug = function (v) {
		msBeautify.debug(v);
	};
	this.close = function () {
		close();
	};
	this.open = function () {		
		open();
	};
	this.showRows = function (r) {
		if (typeof r == "undefined" || r == 0) {
			return false;
		};
		settings.visibleRows = r;
		childHeight(childHeight());
	};
	this.visibleRows = this.showRows;
	this.on = function (type, fn) {
		$("#" + element).on(type, fn);
	};
	this.off = function (type, fn) {
		$("#" + element).off(type, fn);
	};
	this.addMyEvent = this.on;
	this.getData = function () {
		return getDataAndUI()
	};
	this.namedItem = function () {
		var opt = getElement(element).namedItem.apply(getElement(element), arguments);
		return getDataAndUIByOption(opt);
	};
	this.item = function () {
		var opt = getElement(element).item.apply(getElement(element), arguments);
		return getDataAndUIByOption(opt);
	};	
	//v 3.2
	this.setIndexByValue = function(val) {
		this.set("value", val);
	};
	this.destroy = function () {
		var hidid = getPostID("postElementHolder");
		var id = getPostID("postID");
		$("#" + id + ", #" + id + " *").off();
		getElement(element).tabIndex = getElement(id).tabIndex;
		$("#" + id).remove();
		$("#" + element).parent().replaceWith($("#" + element));		
		$("#" + element).data("dd", null);
	};
	this.refresh = function() {
		setValue(getElement(element).selectedIndex);
	};
	//Create msDropDown	
	init();
};
//bind in jquery
$.fn.extend({
			msDropDown: function(settings)
			{
				return this.each(function()
				{
					if (!$(this).data('dd')){
						var mydropdown = new dd(this, settings);
						$(this).data('dd', mydropdown);
					};
				});
			}
});
$.fn.msDropdown = $.fn.msDropDown; //make a copy
})(jQuery);
    $(".dropdown_reg_custom select").msDropDown();
    function changeLocationDetails() {
        if ($("#ip_change_button").html() == 'Change') {
            $("#ucountries").attr('disabled', false);
            $("#states").attr('disabled', false);

            // state
            var state_change = $("#ip_tracking_state").val().toUpperCase();
            $('#states option').filter(function(indexnew) {
                return $(this).text().toUpperCase() === state_change.toUpperCase();
            }).prop('selected', true);

            // country
            var country_change = $("#ip_tracking_country").val();
            $('#ucountries option').filter(function(index) {
                return $(this).text() === country_change;
            }).prop('selected', true);

            $("#city").val($("#ip_tracking_city").val().toUpperCase());
            $("#city").attr('readonly', false);
            $("#ip_change_button").html('DO NOT CHANGE');
            $(".profilefadeIP").css('opacity', '1');
            $(".profilefadeIP").show('slow');
            $(".country_info").hide('slow');
            $(".country_info_heading").hide('slow');
            $("#change_location_button").hide('slow');

        }
        
    }

    $(".profilefadeIP").hide();

    if ($("#ip_tracking_state").val() == '0' || $("#ip_tracking_city").val() == '0') {
        $("#ucountries").attr('disabled', false);
        $("#states").attr('disabled', false);
        $("#city").attr('readonly', false);
        $("#ip_change_button").html('DO NOT CHANGE');
        $(".profilefadeIP").show();
        $(".country_info").hide();
        $(".country_info_heading").hide();
        $("#change_location_button").hide();
    }
    function addPopup(id) {

        if (id == '1') {
            $('#redirect').css('display', 'block');
            $('#redirecthere').css('display', 'block');
            $('#childlink-popup').hide();
        } else {
            $('#noredirect').css('display', 'block');
            $('#noredirecthere').css('display', 'block');
        }
        $("#addChildPopup").show();
        $("#addchild-popup").show();

        $("#addchild-popup").css("height", "auto");
        $("#ChildDetailPopup").hide();
        $(".register_conf_button").hide();
        $('#childlink-popup').hide();
    }
    
    $(document).ready(function() {
        $(".Close-buttonreg").click(function(){

            // Bootrap.js
            /*!
         * Bootstrap v3.0.3 (http://getbootstrap.com)
         * Copyright 2013 Twitter, Inc.
         * Licensed under http://www.apache.org/licenses/LICENSE-2.0
         */

        if (typeof jQuery === "undefined") { throw new Error("Bootstrap requires jQuery") }

        /* ========================================================================
         * Bootstrap: transition.js v3.0.3
         * http://getbootstrap.com/javascript/#transitions
         * ========================================================================
         * Copyright 2013 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * ======================================================================== */


        +function ($) { "use strict";

          // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
          // ============================================================

          function transitionEnd() {
            var el = document.createElement('bootstrap')

            var transEndEventNames = {
              'WebkitTransition' : 'webkitTransitionEnd'
            , 'MozTransition'    : 'transitionend'
            , 'OTransition'      : 'oTransitionEnd otransitionend'
            , 'transition'       : 'transitionend'
            }

            for (var name in transEndEventNames) {
              if (el.style[name] !== undefined) {
                return { end: transEndEventNames[name] }
              }
            }
          }

          // http://blog.alexmaccaw.com/css-transitions
          $.fn.emulateTransitionEnd = function (duration) {
            var called = false, $el = this
            $(this).one($.support.transition.end, function () { called = true })
            var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
            setTimeout(callback, duration)
            return this
          }

          $(function () {
            $.support.transition = transitionEnd()
          })

        }(jQuery);

        /* ========================================================================
         * Bootstrap: alert.js v3.0.3
         * http://getbootstrap.com/javascript/#alerts
         * ========================================================================
         * Copyright 2013 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * ======================================================================== */


        +function ($) { "use strict";

          // ALERT CLASS DEFINITION
          // ======================

          var dismiss = '[data-dismiss="alert"]'
          var Alert   = function (el) {
            $(el).on('click', dismiss, this.close)
          }

          Alert.prototype.close = function (e) {
            var $this    = $(this)
            var selector = $this.attr('data-target')

            if (!selector) {
              selector = $this.attr('href')
              selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
            }

            var $parent = $(selector)

            if (e) e.preventDefault()

            if (!$parent.length) {
              $parent = $this.hasClass('alert') ? $this : $this.parent()
            }

            $parent.trigger(e = $.Event('close.bs.alert'))

            if (e.isDefaultPrevented()) return

            $parent.removeClass('in')

            function removeElement() {
              $parent.trigger('closed.bs.alert').remove()
            }

            $.support.transition && $parent.hasClass('fade') ?
              $parent
                .one($.support.transition.end, removeElement)
                .emulateTransitionEnd(150) :
              removeElement()
          }


          // ALERT PLUGIN DEFINITION
          // =======================

          var old = $.fn.alert

          $.fn.alert = function (option) {
            return this.each(function () {
              var $this = $(this)
              var data  = $this.data('bs.alert')

              if (!data) $this.data('bs.alert', (data = new Alert(this)))
              if (typeof option == 'string') data[option].call($this)
            })
          }

          $.fn.alert.Constructor = Alert


          // ALERT NO CONFLICT
          // =================

          $.fn.alert.noConflict = function () {
            $.fn.alert = old
            return this
          }


          // ALERT DATA-API
          // ==============

          $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

        }(jQuery);

        /* ========================================================================
         * Bootstrap: button.js v3.0.3
         * http://getbootstrap.com/javascript/#buttons
         * ========================================================================
         * Copyright 2013 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * ======================================================================== */


        +function ($) { "use strict";

          // BUTTON PUBLIC CLASS DEFINITION
          // ==============================

          var Button = function (element, options) {
            this.$element = $(element)
            this.options  = $.extend({}, Button.DEFAULTS, options)
          }

          Button.DEFAULTS = {
            loadingText: 'loading...'
          }

          Button.prototype.setState = function (state) {
            var d    = 'disabled'
            var $el  = this.$element
            var val  = $el.is('input') ? 'val' : 'html'
            var data = $el.data()

            state = state + 'Text'

            if (!data.resetText) $el.data('resetText', $el[val]())

            $el[val](data[state] || this.options[state])

            // push to event loop to allow forms to submit
            setTimeout(function () {
              state == 'loadingText' ?
                $el.addClass(d).attr(d, d) :
                $el.removeClass(d).removeAttr(d);
            }, 0)
          }

          Button.prototype.toggle = function () {
            var $parent = this.$element.closest('[data-toggle="buttons"]')
            var changed = true

            if ($parent.length) {
              var $input = this.$element.find('input')
              if ($input.prop('type') === 'radio') {
                // see if clicking on current one
                if ($input.prop('checked') && this.$element.hasClass('active'))
                  changed = false
                else
                  $parent.find('.active').removeClass('active')
              }
              if (changed) $input.prop('checked', !this.$element.hasClass('active')).trigger('change')
            }

            if (changed) this.$element.toggleClass('active')
          }


          // BUTTON PLUGIN DEFINITION
          // ========================

          var old = $.fn.button

          $.fn.button = function (option) {
            return this.each(function () {
              var $this   = $(this)
              var data    = $this.data('bs.button')
              var options = typeof option == 'object' && option

              if (!data) $this.data('bs.button', (data = new Button(this, options)))

              if (option == 'toggle') data.toggle()
              else if (option) data.setState(option)
            })
          }

          $.fn.button.Constructor = Button


          // BUTTON NO CONFLICT
          // ==================

          $.fn.button.noConflict = function () {
            $.fn.button = old
            return this
          }


          // BUTTON DATA-API
          // ===============

          $(document).on('click.bs.button.data-api', '[data-toggle^=button]', function (e) {
            var $btn = $(e.target)
            if (!$btn.hasClass('btn')) $btn = $btn.closest('.btn')
            $btn.button('toggle')
            e.preventDefault()
          })

        }(jQuery);

        /* ========================================================================
         * Bootstrap: carousel.js v3.0.3
         * http://getbootstrap.com/javascript/#carousel
         * ========================================================================
         * Copyright 2013 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * ======================================================================== */


        +function ($) { "use strict";

          // CAROUSEL CLASS DEFINITION
          // =========================

          var Carousel = function (element, options) {
            this.$element    = $(element)
            this.$indicators = this.$element.find('.carousel-indicators')
            this.options     = options
            this.paused      =
            this.sliding     =
            this.interval    =
            this.$active     =
            this.$items      = null

            this.options.pause == 'hover' && this.$element
              .on('mouseenter', $.proxy(this.pause, this))
              .on('mouseleave', $.proxy(this.cycle, this))
          }

          Carousel.DEFAULTS = {
            interval: 5000
          , pause: 'hover'
          , wrap: true
          }

          Carousel.prototype.cycle =  function (e) {
            e || (this.paused = false)

            this.interval && clearInterval(this.interval)

            this.options.interval
              && !this.paused
              && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

            return this
          }

          Carousel.prototype.getActiveIndex = function () {
            this.$active = this.$element.find('.item.active')
            this.$items  = this.$active.parent().children()

            return this.$items.index(this.$active)
          }

          Carousel.prototype.to = function (pos) {
            var that        = this
            var activeIndex = this.getActiveIndex()

            if (pos > (this.$items.length - 1) || pos < 0) return

            if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) })
            if (activeIndex == pos) return this.pause().cycle()

            return this.slide(pos > activeIndex ? 'next' : 'prev', $(this.$items[pos]))
          }

          Carousel.prototype.pause = function (e) {
            e || (this.paused = true)

            if (this.$element.find('.next, .prev').length && $.support.transition.end) {
              this.$element.trigger($.support.transition.end)
              this.cycle(true)
            }

            this.interval = clearInterval(this.interval)

            return this
          }

          Carousel.prototype.next = function () {
            if (this.sliding) return
            return this.slide('next')
          }

          Carousel.prototype.prev = function () {
            if (this.sliding) return
            return this.slide('prev')
          }

          Carousel.prototype.slide = function (type, next) {
            var $active   = this.$element.find('.item.active')
            var $next     = next || $active[type]()
            var isCycling = this.interval
            var direction = type == 'next' ? 'left' : 'right'
            var fallback  = type == 'next' ? 'first' : 'last'
            var that      = this

            if (!$next.length) {
              if (!this.options.wrap) return
              $next = this.$element.find('.item')[fallback]()
            }

            this.sliding = true

            isCycling && this.pause()

            var e = $.Event('slide.bs.carousel', { relatedTarget: $next[0], direction: direction })

            if ($next.hasClass('active')) return

            if (this.$indicators.length) {
              this.$indicators.find('.active').removeClass('active')
              this.$element.one('slid.bs.carousel', function () {
                var $nextIndicator = $(that.$indicators.children()[that.getActiveIndex()])
                $nextIndicator && $nextIndicator.addClass('active')
              })
            }

            if ($.support.transition && this.$element.hasClass('slide')) {
              this.$element.trigger(e)
              if (e.isDefaultPrevented()) return
              $next.addClass(type)
              $next[0].offsetWidth // force reflow
              $active.addClass(direction)
              $next.addClass(direction)
              $active
                .one($.support.transition.end, function () {
                  $next.removeClass([type, direction].join(' ')).addClass('active')
                  $active.removeClass(['active', direction].join(' '))
                  that.sliding = false
                  setTimeout(function () { that.$element.trigger('slid.bs.carousel') }, 0)
                })
                .emulateTransitionEnd(600)
            } else {
              this.$element.trigger(e)
              if (e.isDefaultPrevented()) return
              $active.removeClass('active')
              $next.addClass('active')
              this.sliding = false
              this.$element.trigger('slid.bs.carousel')
            }

            isCycling && this.cycle()

            return this
          }


          // CAROUSEL PLUGIN DEFINITION
          // ==========================

          var old = $.fn.carousel

          $.fn.carousel = function (option) {
            return this.each(function () {
              var $this   = $(this)
              var data    = $this.data('bs.carousel')
              var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
              var action  = typeof option == 'string' ? option : options.slide

              if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
              if (typeof option == 'number') data.to(option)
              else if (action) data[action]()
              else if (options.interval) data.pause().cycle()
            })
          }

          $.fn.carousel.Constructor = Carousel


          // CAROUSEL NO CONFLICT
          // ====================

          $.fn.carousel.noConflict = function () {
            $.fn.carousel = old
            return this
          }


          // CAROUSEL DATA-API
          // =================

          $(document).on('click.bs.carousel.data-api', '[data-slide], [data-slide-to]', function (e) {
            var $this   = $(this), href
            var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
            var options = $.extend({}, $target.data(), $this.data())
            var slideIndex = $this.attr('data-slide-to')
            if (slideIndex) options.interval = false

            $target.carousel(options)

            if (slideIndex = $this.attr('data-slide-to')) {
              $target.data('bs.carousel').to(slideIndex)
            }

            e.preventDefault()
          })

          $(window).on('load', function () {
            $('[data-ride="carousel"]').each(function () {
              var $carousel = $(this)
              $carousel.carousel($carousel.data())
            })
          })

        }(jQuery);

        /* ========================================================================
         * Bootstrap: collapse.js v3.0.3
         * http://getbootstrap.com/javascript/#collapse
         * ========================================================================
         * Copyright 2013 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * ======================================================================== */


        +function ($) { "use strict";

          // COLLAPSE PUBLIC CLASS DEFINITION
          // ================================

          var Collapse = function (element, options) {
            this.$element      = $(element)
            this.options       = $.extend({}, Collapse.DEFAULTS, options)
            this.transitioning = null

            if (this.options.parent) this.$parent = $(this.options.parent)
            if (this.options.toggle) this.toggle()
          }

          Collapse.DEFAULTS = {
            toggle: true
          }

          Collapse.prototype.dimension = function () {
            var hasWidth = this.$element.hasClass('width')
            return hasWidth ? 'width' : 'height'
          }

          Collapse.prototype.show = function () {
            if (this.transitioning || this.$element.hasClass('in')) return

            var startEvent = $.Event('show.bs.collapse')
            this.$element.trigger(startEvent)
            if (startEvent.isDefaultPrevented()) return

            var actives = this.$parent && this.$parent.find('> .panel > .in')

            if (actives && actives.length) {
              var hasData = actives.data('bs.collapse')
              if (hasData && hasData.transitioning) return
              actives.collapse('hide')
              hasData || actives.data('bs.collapse', null)
            }

            var dimension = this.dimension()

            this.$element
              .removeClass('collapse')
              .addClass('collapsing')
              [dimension](0)

            this.transitioning = 1

            var complete = function () {
              this.$element
                .removeClass('collapsing')
                .addClass('in')
                [dimension]('auto')
              this.transitioning = 0
              this.$element.trigger('shown.bs.collapse')
            }

            if (!$.support.transition) return complete.call(this)

            var scrollSize = $.camelCase(['scroll', dimension].join('-'))

            this.$element
              .one($.support.transition.end, $.proxy(complete, this))
              .emulateTransitionEnd(350)
              [dimension](this.$element[0][scrollSize])
          }

          Collapse.prototype.hide = function () {
            if (this.transitioning || !this.$element.hasClass('in')) return

            var startEvent = $.Event('hide.bs.collapse')
            this.$element.trigger(startEvent)
            if (startEvent.isDefaultPrevented()) return

            var dimension = this.dimension()

            this.$element
              [dimension](this.$element[dimension]())
              [0].offsetHeight

            this.$element
              .addClass('collapsing')
              .removeClass('collapse')
              .removeClass('in')

            this.transitioning = 1

            var complete = function () {
              this.transitioning = 0
              this.$element
                .trigger('hidden.bs.collapse')
                .removeClass('collapsing')
                .addClass('collapse')
            }

            if (!$.support.transition) return complete.call(this)

            this.$element
              [dimension](0)
              .one($.support.transition.end, $.proxy(complete, this))
              .emulateTransitionEnd(350)
          }

          Collapse.prototype.toggle = function () {
            this[this.$element.hasClass('in') ? 'hide' : 'show']()
          }


          // COLLAPSE PLUGIN DEFINITION
          // ==========================

          var old = $.fn.collapse

          $.fn.collapse = function (option) {
            return this.each(function () {
              var $this   = $(this)
              var data    = $this.data('bs.collapse')
              var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

              if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
              if (typeof option == 'string') data[option]()
            })
          }

          $.fn.collapse.Constructor = Collapse


          // COLLAPSE NO CONFLICT
          // ====================

          $.fn.collapse.noConflict = function () {
            $.fn.collapse = old
            return this
          }


          // COLLAPSE DATA-API
          // =================

          $(document).on('click.bs.collapse.data-api', '[data-toggle=collapse]', function (e) {
            var $this   = $(this), href
            var target  = $this.attr('data-target')
                || e.preventDefault()
                || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') //strip for ie7
            var $target = $(target)
            var data    = $target.data('bs.collapse')
            var option  = data ? 'toggle' : $this.data()
            var parent  = $this.attr('data-parent')
            var $parent = parent && $(parent)

            if (!data || !data.transitioning) {
              if ($parent) $parent.find('[data-toggle=collapse][data-parent="' + parent + '"]').not($this).addClass('collapsed')
              $this[$target.hasClass('in') ? 'addClass' : 'removeClass']('collapsed')
            }

            $target.collapse(option)
          })

        }(jQuery);

        /* ========================================================================
         * Bootstrap: dropdown.js v3.0.3
         * http://getbootstrap.com/javascript/#dropdowns
         * ========================================================================
         * Copyright 2013 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * ======================================================================== */


        +function ($) { "use strict";

          // DROPDOWN CLASS DEFINITION
          // =========================

          var backdrop = '.dropdown-backdrop'
          var toggle   = '[data-toggle=dropdown]'
          var Dropdown = function (element) {
            $(element).on('click.bs.dropdown', this.toggle)
          }

          Dropdown.prototype.toggle = function (e) {
            var $this = $(this)

            if ($this.is('.disabled, :disabled')) return

            var $parent  = getParent($this)
            var isActive = $parent.hasClass('open')

            clearMenus()

            if (!isActive) {
              if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
                // if mobile we use a backdrop because click events don't delegate
                $('<div class="dropdown-backdrop"/>').insertAfter($(this)).on('click', clearMenus)
              }

              $parent.trigger(e = $.Event('show.bs.dropdown'))

              if (e.isDefaultPrevented()) return

              $parent
                .toggleClass('open')
                .trigger('shown.bs.dropdown')

              $this.focus()
            }

            return false
          }

          Dropdown.prototype.keydown = function (e) {
            if (!/(38|40|27)/.test(e.keyCode)) return

            var $this = $(this)

            e.preventDefault()
            e.stopPropagation()

            if ($this.is('.disabled, :disabled')) return

            var $parent  = getParent($this)
            var isActive = $parent.hasClass('open')

            if (!isActive || (isActive && e.keyCode == 27)) {
              if (e.which == 27) $parent.find(toggle).focus()
              return $this.click()
            }

            var $items = $('[role=menu] li:not(.divider):visible a', $parent)

            if (!$items.length) return

            var index = $items.index($items.filter(':focus'))

            if (e.keyCode == 38 && index > 0)                 index--                        // up
            if (e.keyCode == 40 && index < $items.length - 1) index++                        // down
            if (!~index)                                      index=0

            $items.eq(index).focus()
          }

          function clearMenus() {
            $(backdrop).remove()
            $(toggle).each(function (e) {
              var $parent = getParent($(this))
              if (!$parent.hasClass('open')) return
              $parent.trigger(e = $.Event('hide.bs.dropdown'))
              if (e.isDefaultPrevented()) return
              $parent.removeClass('open').trigger('hidden.bs.dropdown')
            })
          }

          function getParent($this) {
            var selector = $this.attr('data-target')

            if (!selector) {
              selector = $this.attr('href')
              selector = selector && /#/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
            }

            var $parent = selector && $(selector)

            return $parent && $parent.length ? $parent : $this.parent()
          }


          // DROPDOWN PLUGIN DEFINITION
          // ==========================

          var old = $.fn.dropdown

          $.fn.dropdown = function (option) {
            return this.each(function () {
              var $this = $(this)
              var data  = $this.data('bs.dropdown')

              if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
              if (typeof option == 'string') data[option].call($this)
            })
          }

          $.fn.dropdown.Constructor = Dropdown


          // DROPDOWN NO CONFLICT
          // ====================

          $.fn.dropdown.noConflict = function () {
            $.fn.dropdown = old
            return this
          }


          // APPLY TO STANDARD DROPDOWN ELEMENTS
          // ===================================

          $(document)
            .on('click.bs.dropdown.data-api', clearMenus)
            .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
            .on('click.bs.dropdown.data-api'  , toggle, Dropdown.prototype.toggle)
            .on('keydown.bs.dropdown.data-api', toggle + ', [role=menu]' , Dropdown.prototype.keydown)

        }(jQuery);

        /* ========================================================================
         * Bootstrap: modal.js v3.0.3
         * http://getbootstrap.com/javascript/#modals
         * ========================================================================
         * Copyright 2013 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * ======================================================================== */


        +function ($) { "use strict";

          // MODAL CLASS DEFINITION
          // ======================

          var Modal = function (element, options) {
            this.options   = options
            this.$element  = $(element)
            this.$backdrop =
            this.isShown   = null

            if (this.options.remote) this.$element.load(this.options.remote)
          }

          Modal.DEFAULTS = {
              backdrop: 'static'
            , keyboard: true
            , show: true
          }

          Modal.prototype.toggle = function (_relatedTarget) {
            return this[!this.isShown ? 'show' : 'hide'](_relatedTarget)
          }

          Modal.prototype.show = function (_relatedTarget) {
            var that = this
            var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

            this.$element.trigger(e)

            if (this.isShown || e.isDefaultPrevented()) return

            this.isShown = true

            this.escape()

            this.$element.on('click.dismiss.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

            this.backdrop(function () {
              var transition = $.support.transition && that.$element.hasClass('fade')

              if (!that.$element.parent().length) {
                that.$element.appendTo(document.body) // don't move modals dom position
              }

              that.$element.show()

              if (transition) {
                that.$element[0].offsetWidth // force reflow
              }

              that.$element
                .addClass('in')
                .attr('aria-hidden', false)

              that.enforceFocus()

              var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

              transition ?
                that.$element.find('.modal-dialog') // wait for modal to slide in
                  .one($.support.transition.end, function () {
                    that.$element.focus().trigger(e)
                  })
                  .emulateTransitionEnd(300) :
                that.$element.focus().trigger(e)
            })
          }

          Modal.prototype.hide = function (e) {
            if (e) e.preventDefault()

            e = $.Event('hide.bs.modal')

            this.$element.trigger(e)

            if (!this.isShown || e.isDefaultPrevented()) return

            this.isShown = false

            this.escape()

            $(document).off('focusin.bs.modal')

            this.$element
              .removeClass('in')
              .attr('aria-hidden', true)
              .off('click.dismiss.modal')

            $.support.transition && this.$element.hasClass('fade') ?
              this.$element
                .one($.support.transition.end, $.proxy(this.hideModal, this))
                .emulateTransitionEnd(300) :
              this.hideModal()
          }

          Modal.prototype.enforceFocus = function () {
            $(document)
              .off('focusin.bs.modal') // guard against infinite focus loop
              .on('focusin.bs.modal', $.proxy(function (e) {
                if (this.$element[0] !== e.target && !this.$element.has(e.target).length) {
                  this.$element.focus()
                }
              }, this))
          }

          Modal.prototype.escape = function () {
            if (this.isShown && this.options.keyboard) {
              this.$element.on('keyup.dismiss.bs.modal', $.proxy(function (e) {
                e.which == 27 && this.hide()
              }, this))
            } else if (!this.isShown) {
              this.$element.off('keyup.dismiss.bs.modal')
            }
          }

          Modal.prototype.hideModal = function () {
            var that = this
            this.$element.hide()
            this.backdrop(function () {
              that.removeBackdrop()
              that.$element.trigger('hidden.bs.modal')
            })
          }

          Modal.prototype.removeBackdrop = function () {
            this.$backdrop && this.$backdrop.remove()
            this.$backdrop = null
          }

          Modal.prototype.backdrop = function (callback) {
            var that    = this
            var animate = this.$element.hasClass('fade') ? 'fade' : ''

            if (this.isShown && this.options.backdrop) {
              var doAnimate = $.support.transition && animate

              this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />')
                .appendTo(document.body)

              this.$element.on('click.dismiss.modal', $.proxy(function (e) {
                if (e.target !== e.currentTarget) return
                this.options.backdrop == 'static'
                  ? this.$element[0].focus.call(this.$element[0])
                  : this.hide.call(this)
              }, this))

              if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

              this.$backdrop.addClass('in')

              if (!callback) return

              doAnimate ?
                this.$backdrop
                  .one($.support.transition.end, callback)
                  .emulateTransitionEnd(150) :
                callback()

            } else if (!this.isShown && this.$backdrop) {
              this.$backdrop.removeClass('in')

              $.support.transition && this.$element.hasClass('fade')?
                this.$backdrop
                  .one($.support.transition.end, callback)
                  .emulateTransitionEnd(150) :
                callback()

            } else if (callback) {
              callback()
            }
          }


          // MODAL PLUGIN DEFINITION
          // =======================

          var old = $.fn.modal

          $.fn.modal = function (option, _relatedTarget) {
            return this.each(function () {
              var $this   = $(this)
              var data    = $this.data('bs.modal')
              var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

              if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
              if (typeof option == 'string') data[option](_relatedTarget)
              else if (options.show) data.show(_relatedTarget)
            })
          }

          $.fn.modal.Constructor = Modal


          // MODAL NO CONFLICT
          // =================

          $.fn.modal.noConflict = function () {
            $.fn.modal = old
            return this
          }


          // MODAL DATA-API
          // ==============

          $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
            var $this   = $(this)
            var href    = $this.attr('href')
            var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) //strip for ie7
            var option  = $target.data('modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

            e.preventDefault()

            $target
              .modal(option, this)
              .one('hide', function () {
                $this.is(':visible') && $this.focus()
              })
          })

          $(document)
            .on('show.bs.modal',  '.modal', function () { $(document.body).addClass('modal-open') })
            .on('hidden.bs.modal', '.modal', function () { $(document.body).removeClass('modal-open') })

        }(jQuery);

        /* ========================================================================
         * Bootstrap: tooltip.js v3.0.3
         * http://getbootstrap.com/javascript/#tooltip
         * Inspired by the original jQuery.tipsy by Jason Frame
         * ========================================================================
         * Copyright 2013 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * ======================================================================== */


        +function ($) { "use strict";

          // TOOLTIP PUBLIC CLASS DEFINITION
          // ===============================

          var Tooltip = function (element, options) {
            this.type       =
            this.options    =
            this.enabled    =
            this.timeout    =
            this.hoverState =
            this.$element   = null

            this.init('tooltip', element, options)
          }

          Tooltip.DEFAULTS = {
            animation: true
          , placement: 'top'
          , selector: false
          , template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>'
          , trigger: 'hover focus'
          , title: ''
          , delay: 0
          , html: false
          , container: false
          }

          Tooltip.prototype.init = function (type, element, options) {
            this.enabled  = true
            this.type     = type
            this.$element = $(element)
            this.options  = this.getOptions(options)

            var triggers = this.options.trigger.split(' ')

            for (var i = triggers.length; i--;) {
              var trigger = triggers[i]

              if (trigger == 'click') {
                this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
              } else if (trigger != 'manual') {
                var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focus'
                var eventOut = trigger == 'hover' ? 'mouseleave' : 'blur'

                this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
                this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
              }
            }

            this.options.selector ?
              (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
              this.fixTitle()
          }

          Tooltip.prototype.getDefaults = function () {
            return Tooltip.DEFAULTS
          }

          Tooltip.prototype.getOptions = function (options) {
            options = $.extend({}, this.getDefaults(), this.$element.data(), options)

            if (options.delay && typeof options.delay == 'number') {
              options.delay = {
                show: options.delay
              , hide: options.delay
              }
            }

            return options
          }

          Tooltip.prototype.getDelegateOptions = function () {
            var options  = {}
            var defaults = this.getDefaults()

            this._options && $.each(this._options, function (key, value) {
              if (defaults[key] != value) options[key] = value
            })

            return options
          }

          Tooltip.prototype.enter = function (obj) {
            var self = obj instanceof this.constructor ?
              obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type)

            clearTimeout(self.timeout)

            self.hoverState = 'in'

            if (!self.options.delay || !self.options.delay.show) return self.show()

            self.timeout = setTimeout(function () {
              if (self.hoverState == 'in') self.show()
            }, self.options.delay.show)
          }

          Tooltip.prototype.leave = function (obj) {
            var self = obj instanceof this.constructor ?
              obj : $(obj.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type)

            clearTimeout(self.timeout)

            self.hoverState = 'out'

            if (!self.options.delay || !self.options.delay.hide) return self.hide()

            self.timeout = setTimeout(function () {
              if (self.hoverState == 'out') self.hide()
            }, self.options.delay.hide)
          }

          Tooltip.prototype.show = function () {
            var e = $.Event('show.bs.'+ this.type)

            if (this.hasContent() && this.enabled) {
              this.$element.trigger(e)

              if (e.isDefaultPrevented()) return

              var $tip = this.tip()

              this.setContent()

              if (this.options.animation) $tip.addClass('fade')

              var placement = typeof this.options.placement == 'function' ?
                this.options.placement.call(this, $tip[0], this.$element[0]) :
                this.options.placement

              var autoToken = /\s?auto?\s?/i
              var autoPlace = autoToken.test(placement)
              if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

              $tip
                .detach()
                .css({ top: 0, left: 0, display: 'block' })
                .addClass(placement)

              this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)

              var pos          = this.getPosition()
              var actualWidth  = $tip[0].offsetWidth
              var actualHeight = $tip[0].offsetHeight

              if (autoPlace) {
                var $parent = this.$element.parent()

                var orgPlacement = placement
                var docScroll    = document.documentElement.scrollTop || document.body.scrollTop
                var parentWidth  = this.options.container == 'body' ? window.innerWidth  : $parent.outerWidth()
                var parentHeight = this.options.container == 'body' ? window.innerHeight : $parent.outerHeight()
                var parentLeft   = this.options.container == 'body' ? 0 : $parent.offset().left

                placement = placement == 'bottom' && pos.top   + pos.height  + actualHeight - docScroll > parentHeight  ? 'top'    :
                            placement == 'top'    && pos.top   - docScroll   - actualHeight < 0                         ? 'bottom' :
                            placement == 'right'  && pos.right + actualWidth > parentWidth                              ? 'left'   :
                            placement == 'left'   && pos.left  - actualWidth < parentLeft                               ? 'right'  :
                            placement

                $tip
                  .removeClass(orgPlacement)
                  .addClass(placement)
              }

              var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

              this.applyPlacement(calculatedOffset, placement)
              this.$element.trigger('shown.bs.' + this.type)
            }
          }

          Tooltip.prototype.applyPlacement = function(offset, placement) {
            var replace
            var $tip   = this.tip()
            var width  = $tip[0].offsetWidth
            var height = $tip[0].offsetHeight

            // manually read margins because getBoundingClientRect includes difference
            var marginTop = parseInt($tip.css('margin-top'), 10)
            var marginLeft = parseInt($tip.css('margin-left'), 10)

            // we must check for NaN for ie 8/9
            if (isNaN(marginTop))  marginTop  = 0
            if (isNaN(marginLeft)) marginLeft = 0

            offset.top  = offset.top  + marginTop
            offset.left = offset.left + marginLeft

            $tip
              .offset(offset)
              .addClass('in')

            // check to see if placing tip in new offset caused the tip to resize itself
            var actualWidth  = $tip[0].offsetWidth
            var actualHeight = $tip[0].offsetHeight

            if (placement == 'top' && actualHeight != height) {
              replace = true
              offset.top = offset.top + height - actualHeight
            }

            if (/bottom|top/.test(placement)) {
              var delta = 0

              if (offset.left < 0) {
                delta       = offset.left * -2
                offset.left = 0

                $tip.offset(offset)

                actualWidth  = $tip[0].offsetWidth
                actualHeight = $tip[0].offsetHeight
              }

              this.replaceArrow(delta - width + actualWidth, actualWidth, 'left')
            } else {
              this.replaceArrow(actualHeight - height, actualHeight, 'top')
            }

            if (replace) $tip.offset(offset)
          }

          Tooltip.prototype.replaceArrow = function(delta, dimension, position) {
            this.arrow().css(position, delta ? (50 * (1 - delta / dimension) + "%") : '')
          }

          Tooltip.prototype.setContent = function () {
            var $tip  = this.tip()
            var title = this.getTitle()

            $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
            $tip.removeClass('fade in top bottom left right')
          }

          Tooltip.prototype.hide = function () {
            var that = this
            var $tip = this.tip()
            var e    = $.Event('hide.bs.' + this.type)

            function complete() {
              if (that.hoverState != 'in') $tip.detach()
            }

            this.$element.trigger(e)

            if (e.isDefaultPrevented()) return

            $tip.removeClass('in')

            $.support.transition && this.$tip.hasClass('fade') ?
              $tip
                .one($.support.transition.end, complete)
                .emulateTransitionEnd(150) :
              complete()

            this.$element.trigger('hidden.bs.' + this.type)

            return this
          }

          Tooltip.prototype.fixTitle = function () {
            var $e = this.$element
            if ($e.attr('title') || typeof($e.attr('data-original-title')) != 'string') {
              $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
            }
          }

          Tooltip.prototype.hasContent = function () {
            return this.getTitle()
          }

          Tooltip.prototype.getPosition = function () {
            var el = this.$element[0]
            return $.extend({}, (typeof el.getBoundingClientRect == 'function') ? el.getBoundingClientRect() : {
              width: el.offsetWidth
            , height: el.offsetHeight
            }, this.$element.offset())
          }

          Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
            return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2  } :
                   placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2  } :
                   placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
                /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width   }
          }

          Tooltip.prototype.getTitle = function () {
            var title
            var $e = this.$element
            var o  = this.options

            title = $e.attr('data-original-title')
              || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

            return title
          }

          Tooltip.prototype.tip = function () {
            return this.$tip = this.$tip || $(this.options.template)
          }

          Tooltip.prototype.arrow = function () {
            return this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow')
          }

          Tooltip.prototype.validate = function () {
            if (!this.$element[0].parentNode) {
              this.hide()
              this.$element = null
              this.options  = null
            }
          }

          Tooltip.prototype.enable = function () {
            this.enabled = true
          }

          Tooltip.prototype.disable = function () {
            this.enabled = false
          }

          Tooltip.prototype.toggleEnabled = function () {
            this.enabled = !this.enabled
          }

          Tooltip.prototype.toggle = function (e) {
            var self = e ? $(e.currentTarget)[this.type](this.getDelegateOptions()).data('bs.' + this.type) : this
            self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
          }

          Tooltip.prototype.destroy = function () {
            this.hide().$element.off('.' + this.type).removeData('bs.' + this.type)
          }


          // TOOLTIP PLUGIN DEFINITION
          // =========================

          var old = $.fn.tooltip

          $.fn.tooltip = function (option) {
            return this.each(function () {
              var $this   = $(this)
              var data    = $this.data('bs.tooltip')
              var options = typeof option == 'object' && option

              if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
              if (typeof option == 'string') data[option]()
            })
          }

          $.fn.tooltip.Constructor = Tooltip


          // TOOLTIP NO CONFLICT
          // ===================

          $.fn.tooltip.noConflict = function () {
            $.fn.tooltip = old
            return this
          }

        }(jQuery);

        /* ========================================================================
         * Bootstrap: popover.js v3.0.3
         * http://getbootstrap.com/javascript/#popovers
         * ========================================================================
         * Copyright 2013 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * ======================================================================== */


        +function ($) { "use strict";

          // POPOVER PUBLIC CLASS DEFINITION
          // ===============================

          var Popover = function (element, options) {
            this.init('popover', element, options)
          }

          if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

          Popover.DEFAULTS = $.extend({} , $.fn.tooltip.Constructor.DEFAULTS, {
            placement: 'right'
          , trigger: 'click'
          , content: ''
          , template: '<div class="popover"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
          })


          // NOTE: POPOVER EXTENDS tooltip.js
          // ================================

          Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

          Popover.prototype.constructor = Popover

          Popover.prototype.getDefaults = function () {
            return Popover.DEFAULTS
          }

          Popover.prototype.setContent = function () {
            var $tip    = this.tip()
            var title   = this.getTitle()
            var content = this.getContent()

            $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
            $tip.find('.popover-content')[this.options.html ? 'html' : 'text'](content)

            $tip.removeClass('fade top bottom left right in')

            // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
            // this manually by checking the contents.
            if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
          }

          Popover.prototype.hasContent = function () {
            return this.getTitle() || this.getContent()
          }

          Popover.prototype.getContent = function () {
            var $e = this.$element
            var o  = this.options

            return $e.attr('data-content')
              || (typeof o.content == 'function' ?
                    o.content.call($e[0]) :
                    o.content)
          }

          Popover.prototype.arrow = function () {
            return this.$arrow = this.$arrow || this.tip().find('.arrow')
          }

          Popover.prototype.tip = function () {
            if (!this.$tip) this.$tip = $(this.options.template)
            return this.$tip
          }


          // POPOVER PLUGIN DEFINITION
          // =========================

          var old = $.fn.popover

          $.fn.popover = function (option) {
            return this.each(function () {
              var $this   = $(this)
              var data    = $this.data('bs.popover')
              var options = typeof option == 'object' && option

              if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
              if (typeof option == 'string') data[option]()
            })
          }

          $.fn.popover.Constructor = Popover


          // POPOVER NO CONFLICT
          // ===================

          $.fn.popover.noConflict = function () {
            $.fn.popover = old
            return this
          }

        }(jQuery);

        /* ========================================================================
         * Bootstrap: scrollspy.js v3.0.3
         * http://getbootstrap.com/javascript/#scrollspy
         * ========================================================================
         * Copyright 2013 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * ======================================================================== */


        +function ($) { "use strict";

          // SCROLLSPY CLASS DEFINITION
          // ==========================

          function ScrollSpy(element, options) {
            var href
            var process  = $.proxy(this.process, this)

            this.$element       = $(element).is('body') ? $(window) : $(element)
            this.$body          = $('body')
            this.$scrollElement = this.$element.on('scroll.bs.scroll-spy.data-api', process)
            this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
            this.selector       = (this.options.target
              || ((href = $(element).attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) //strip for ie7
              || '') + ' .nav li > a'
            this.offsets        = $([])
            this.targets        = $([])
            this.activeTarget   = null

            this.refresh()
            this.process()
          }

          ScrollSpy.DEFAULTS = {
            offset: 10
          }

          ScrollSpy.prototype.refresh = function () {
            var offsetMethod = this.$element[0] == window ? 'offset' : 'position'

            this.offsets = $([])
            this.targets = $([])

            var self     = this
            var $targets = this.$body
              .find(this.selector)
              .map(function () {
                var $el   = $(this)
                var href  = $el.data('target') || $el.attr('href')
                var $href = /^#\w/.test(href) && $(href)

                return ($href
                  && $href.length
                  && [[ $href[offsetMethod]().top + (!$.isWindow(self.$scrollElement.get(0)) && self.$scrollElement.scrollTop()), href ]]) || null
              })
              .sort(function (a, b) { return a[0] - b[0] })
              .each(function () {
                self.offsets.push(this[0])
                self.targets.push(this[1])
              })
          }

          ScrollSpy.prototype.process = function () {
            var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
            var scrollHeight = this.$scrollElement[0].scrollHeight || this.$body[0].scrollHeight
            var maxScroll    = scrollHeight - this.$scrollElement.height()
            var offsets      = this.offsets
            var targets      = this.targets
            var activeTarget = this.activeTarget
            var i

            if (scrollTop >= maxScroll) {
              return activeTarget != (i = targets.last()[0]) && this.activate(i)
            }

            for (i = offsets.length; i--;) {
              activeTarget != targets[i]
                && scrollTop >= offsets[i]
                && (!offsets[i + 1] || scrollTop <= offsets[i + 1])
                && this.activate( targets[i] )
            }
          }

          ScrollSpy.prototype.activate = function (target) {
            this.activeTarget = target

            $(this.selector)
              .parents('.active')
              .removeClass('active')

            var selector = this.selector
              + '[data-target="' + target + '"],'
              + this.selector + '[href="' + target + '"]'

            var active = $(selector)
              .parents('li')
              .addClass('active')

            if (active.parent('.dropdown-menu').length)  {
              active = active
                .closest('li.dropdown')
                .addClass('active')
            }

            active.trigger('activate.bs.scrollspy')
          }


          // SCROLLSPY PLUGIN DEFINITION
          // ===========================

          var old = $.fn.scrollspy

          $.fn.scrollspy = function (option) {
            return this.each(function () {
              var $this   = $(this)
              var data    = $this.data('bs.scrollspy')
              var options = typeof option == 'object' && option

              if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
              if (typeof option == 'string') data[option]()
            })
          }

          $.fn.scrollspy.Constructor = ScrollSpy


          // SCROLLSPY NO CONFLICT
          // =====================

          $.fn.scrollspy.noConflict = function () {
            $.fn.scrollspy = old
            return this
          }


          // SCROLLSPY DATA-API
          // ==================

          $(window).on('load', function () {
            $('[data-spy="scroll"]').each(function () {
              var $spy = $(this)
              $spy.scrollspy($spy.data())
            })
          })

        }(jQuery);

        /* ========================================================================
         * Bootstrap: tab.js v3.0.3
         * http://getbootstrap.com/javascript/#tabs
         * ========================================================================
         * Copyright 2013 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * ======================================================================== */


        +function ($) { "use strict";

          // TAB CLASS DEFINITION
          // ====================

          var Tab = function (element) {
            this.element = $(element)
          }

          Tab.prototype.show = function () {
            var $this    = this.element
            var $ul      = $this.closest('ul:not(.dropdown-menu)')
            var selector = $this.data('target')

            if (!selector) {
              selector = $this.attr('href')
              selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') //strip for ie7
            }

            if ($this.parent('li').hasClass('active')) return

            var previous = $ul.find('.active:last a')[0]
            var e        = $.Event('show.bs.tab', {
              relatedTarget: previous
            })

            $this.trigger(e)

            if (e.isDefaultPrevented()) return

            var $target = $(selector)

            this.activate($this.parent('li'), $ul)
            this.activate($target, $target.parent(), function () {
              $this.trigger({
                type: 'shown.bs.tab'
              , relatedTarget: previous
              })
            })
          }

          Tab.prototype.activate = function (element, container, callback) {
            var $active    = container.find('> .active')
            var transition = callback
              && $.support.transition
              && $active.hasClass('fade')

            function next() {
              $active
                .removeClass('active')
                .find('> .dropdown-menu > .active')
                .removeClass('active')

              element.addClass('active')

              if (transition) {
                element[0].offsetWidth // reflow for transition
                element.addClass('in')
              } else {
                element.removeClass('fade')
              }

              if (element.parent('.dropdown-menu')) {
                element.closest('li.dropdown').addClass('active')
              }

              callback && callback()
            }

            transition ?
              $active
                .one($.support.transition.end, next)
                .emulateTransitionEnd(150) :
              next()

            $active.removeClass('in')
          }


          // TAB PLUGIN DEFINITION
          // =====================

          var old = $.fn.tab

          $.fn.tab = function ( option ) {
            return this.each(function () {
              var $this = $(this)
              var data  = $this.data('bs.tab')

              if (!data) $this.data('bs.tab', (data = new Tab(this)))
              if (typeof option == 'string') data[option]()
            })
          }

          $.fn.tab.Constructor = Tab


          // TAB NO CONFLICT
          // ===============

          $.fn.tab.noConflict = function () {
            $.fn.tab = old
            return this
          }


          // TAB DATA-API
          // ============

          $(document).on('click.bs.tab.data-api', '[data-toggle="tab"], [data-toggle="pill"]', function (e) {
            e.preventDefault()
            $(this).tab('show')
          })

        }(jQuery);

        /* ========================================================================
         * Bootstrap: affix.js v3.0.3
         * http://getbootstrap.com/javascript/#affix
         * ========================================================================
         * Copyright 2013 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * ======================================================================== */


        +function ($) { "use strict";

          // AFFIX CLASS DEFINITION
          // ======================

          var Affix = function (element, options) {
            this.options = $.extend({}, Affix.DEFAULTS, options)
            this.$window = $(window)
              .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
              .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

            this.$element = $(element)
            this.affixed  =
            this.unpin    = null

            this.checkPosition()
          }

          Affix.RESET = 'affix affix-top affix-bottom'

          Affix.DEFAULTS = {
            offset: 0
          }

          Affix.prototype.checkPositionWithEventLoop = function () {
            setTimeout($.proxy(this.checkPosition, this), 1)
          }

          Affix.prototype.checkPosition = function () {
            if (!this.$element.is(':visible')) return

            var scrollHeight = $(document).height()
            var scrollTop    = this.$window.scrollTop()
            var position     = this.$element.offset()
            var offset       = this.options.offset
            var offsetTop    = offset.top
            var offsetBottom = offset.bottom

            if (typeof offset != 'object')         offsetBottom = offsetTop = offset
            if (typeof offsetTop == 'function')    offsetTop    = offset.top()
            if (typeof offsetBottom == 'function') offsetBottom = offset.bottom()

            var affix = this.unpin   != null && (scrollTop + this.unpin <= position.top) ? false :
                        offsetBottom != null && (position.top + this.$element.height() >= scrollHeight - offsetBottom) ? 'bottom' :
                        offsetTop    != null && (scrollTop <= offsetTop) ? 'top' : false

            if (this.affixed === affix) return
            if (this.unpin) this.$element.css('top', '')

            this.affixed = affix
            this.unpin   = affix == 'bottom' ? position.top - scrollTop : null

            this.$element.removeClass(Affix.RESET).addClass('affix' + (affix ? '-' + affix : ''))

            if (affix == 'bottom') {
              this.$element.offset({ top: document.body.offsetHeight - offsetBottom - this.$element.height() })
            }
          }


          // AFFIX PLUGIN DEFINITION
          // =======================

          var old = $.fn.affix

          $.fn.affix = function (option) {
            return this.each(function () {
              var $this   = $(this)
              var data    = $this.data('bs.affix')
              var options = typeof option == 'object' && option

              if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
              if (typeof option == 'string') data[option]()
            })
          }

          $.fn.affix.Constructor = Affix


          // AFFIX NO CONFLICT
          // =================

          $.fn.affix.noConflict = function () {
            $.fn.affix = old
            return this
          }


          // AFFIX DATA-API
          // ==============

          $(window).on('load', function () {
            $('[data-spy="affix"]').each(function () {
              var $spy = $(this)
              var data = $spy.data()

              data.offset = data.offset || {}

              if (data.offsetBottom) data.offset.bottom = data.offsetBottom
              if (data.offsetTop)    data.offset.top    = data.offsetTop

              $spy.affix(data)
            })
          })

        }(jQuery);



        // selectbox js
        
        /*!
 * jQuery Selectbox plugin 0.2
 *
 * Copyright 2011-2012, Dimitar Ivanov (http://www.bulgaria-web-developers.com/projects/javascript/selectbox/)
 * Licensed under the MIT (http://www.opensource.org/licenses/mit-license.php) license.
 * 
 * Date: Tue Jul 17 19:58:36 2012 +0300
 */
(function ($, undefined) {
	var PROP_NAME = 'selectbox',
		FALSE = false,
		TRUE = true;
	/**
	 * Selectbox manager.
	 * Use the singleton instance of this class, $.selectbox, to interact with the select box.
	 * Settings for (groups of) select boxes are maintained in an instance object,
	 * allowing multiple different settings on the same page
	 */
	function Selectbox() {
		this._state = [];
		this._defaults = { // Global defaults for all the select box instances
			classHolder: "sbHolder",
			classHolderDisabled: "sbHolderDisabled",
			classSelector: "sbSelector",
			classOptions: "sbOptions",
			classGroup: "sbGroup",
			classSub: "sbSub",
			classDisabled: "sbDisabled",
			classToggleOpen: "sbToggleOpen",
			classToggle: "sbToggle",
			classFocus: "sbFocus",
			speed: 200,
			effect: "slide", // "slide" or "fade"
			onChange: null, //Define a callback function when the selectbox is changed
			onOpen: null, //Define a callback function when the selectbox is open
			onClose: null, //Define a callback function when the selectbox is closed
                        customDisabled: false, //custom added by ankit
                        customDisableClass:"custom-disabled" //custom added by ankit
		};
	}
	
	$.extend(Selectbox.prototype, {
		/**
		 * Is the first field in a jQuery collection open as a selectbox
		 * 
		 * @param {Object} target
		 * @return {Boolean}
		 */
		_isOpenSelectbox: function (target) {
			if (!target) {
				return FALSE;
			}
			var inst = this._getInst(target);
			return inst.isOpen;
		},
		/**
		 * Is the first field in a jQuery collection disabled as a selectbox
		 * 
		 * @param {HTMLElement} target
		 * @return {Boolean}
		 */
		_isDisabledSelectbox: function (target) {
			if (!target) {
				return FALSE;
			}
			var inst = this._getInst(target);
			return inst.isDisabled;
		},
		/**
		 * Attach the select box to a jQuery selection.
		 * 
		 * @param {HTMLElement} target
		 * @param {Object} settings
		 */
		_attachSelectbox: function (target, settings) {
			if (this._getInst(target)) {
				return FALSE;
			}
			var $target = $(target),
				self = this,
				inst = self._newInst($target),
				sbHolder, sbSelector, sbToggle, sbOptions,
				s = FALSE, optGroup = $target.find("optgroup"), opts = $target.find("option"), olen = opts.length;
				
			$target.attr("sb", inst.uid);
				
			$.extend(inst.settings, self._defaults, settings);
			self._state[inst.uid] = FALSE;
			$target.hide();
			
			function closeOthers() {
				var key, sel,
					uid = this.attr("id").split("_")[1];
				for (key in self._state) {
					if (key !== uid) {
						if (self._state.hasOwnProperty(key)) {
							sel = $("select[sb='" + key + "']")[0];
							if (sel) {
								self._closeSelectbox(sel);
							}
						}
					}
				}
			}
			
			sbHolder = $("<div>", {
				"id": "sbHolder_" + inst.uid,
				"class": inst.settings.classHolder + " "+(inst.settings.customDisabled?inst.settings.customDisableClass:''), //added by ankit
				"tabindex": $target.attr("tabindex")
			});
			
			sbSelector = $("<a>", {
				"id": "sbSelector_" + inst.uid,
				"href": "#",
				"class": inst.settings.classSelector,
				"click": function (e) {
					e.preventDefault();
					closeOthers.apply($(this), []);
					var uid = $(this).attr("id").split("_")[1];
					if (self._state[uid]) {
						self._closeSelectbox(target);
					} else {
						self._openSelectbox(target);
					}
				}
			});
			
			sbToggle = $("<a>", {
				"id": "sbToggle_" + inst.uid,
				"href": "#",
				"class": inst.settings.classToggle,
				"click": function (e) {
					e.preventDefault();
					closeOthers.apply($(this), []);
					var uid = $(this).attr("id").split("_")[1];
					if (self._state[uid]) {
						self._closeSelectbox(target);
					} else {
						self._openSelectbox(target);
					}
				}
			});
			sbToggle.appendTo(sbHolder);

			sbOptions = $("<ul>", {
				"id": "sbOptions_" + inst.uid,
				"class": inst.settings.classOptions,
				"css": {
					"display": "none"
				}
			});
			
			$target.children().each(function(i) {
				var that = $(this), li, config = {};
				if (that.is("option")) {
					getOptions(that);
				} else if (that.is("optgroup")) {
					li = $("<li>");
					$("<span>", {
						"text": that.attr("label")
					}).addClass(inst.settings.classGroup).appendTo(li);
					li.appendTo(sbOptions);
					if (that.is(":disabled")) {
						config.disabled = true;
					}
					config.sub = true;
					getOptions(that.find("option"), config);
				}
			});
			
			function getOptions () {
				var sub = arguments[1] && arguments[1].sub ? true : false,
					disabled = arguments[1] && arguments[1].disabled ? true : false;
				arguments[0].each(function (i) {
					var that = $(this),
						li = $("<li>"),
						child;
					if (that.is(":selected")) {
						sbSelector.text(that.text());
						s = TRUE;
					}
					if (i === olen - 1) {
						li.addClass("last");
					}
					if (!that.is(":disabled") && !disabled) {
						child = $("<a>", {
							"href": "#" + that.val(),
							"rel": that.val()
						}).text(that.text()).bind("click.sb", function (e) {
							if (e && e.preventDefault) {
								e.preventDefault();
							}
							var t = sbToggle,
							 	$this = $(this),
								uid = t.attr("id").split("_")[1];
							self._changeSelectbox(target, $this.attr("rel"), $this.text());
							self._closeSelectbox(target);
						}).bind("mouseover.sb", function () {
							var $this = $(this);
							$this.parent().siblings().find("a").removeClass(inst.settings.classFocus);
							$this.addClass(inst.settings.classFocus);
						}).bind("mouseout.sb", function () {
							$(this).removeClass(inst.settings.classFocus);
						});
						if (sub) {
							child.addClass(inst.settings.classSub);
						}
						if (that.is(":selected")) {
							child.addClass(inst.settings.classFocus);
						}
						child.appendTo(li);
					} else {
						child = $("<span>", {
							"text": that.text()
						}).addClass(inst.settings.classDisabled);
						if (sub) {
							child.addClass(inst.settings.classSub);
						}
						child.appendTo(li);
					}
					li.appendTo(sbOptions);
				});
			}
			
			if (!s) {
				sbSelector.text(opts.first().text());
			}

			$.data(target, PROP_NAME, inst);
			
			sbHolder.data("uid", inst.uid).bind("keydown.sb", function (e) {
				var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0,
					$this = $(this),
					uid = $this.data("uid"),
					inst = $this.siblings("select[sb='"+uid+"']").data(PROP_NAME),
					trgt = $this.siblings(["select[sb='", uid, "']"].join("")).get(0),
					$f = $this.find("ul").find("a." + inst.settings.classFocus);
				switch (key) {
					case 37: //Arrow Left
					case 38: //Arrow Up
						if ($f.length > 0) {
							var $next;
							$("a", $this).removeClass(inst.settings.classFocus);
							$next = $f.parent().prevAll("li:has(a)").eq(0).find("a");
							if ($next.length > 0) {
								$next.addClass(inst.settings.classFocus).focus();
								$("#sbSelector_" + uid).text($next.text());
							}
						}
						break;
					case 39: //Arrow Right
					case 40: //Arrow Down
						var $next;
						$("a", $this).removeClass(inst.settings.classFocus);
						if ($f.length > 0) {
							$next = $f.parent().nextAll("li:has(a)").eq(0).find("a");
						} else {
							$next = $this.find("ul").find("a").eq(0);
						}
						if ($next.length > 0) {
							$next.addClass(inst.settings.classFocus).focus();
							$("#sbSelector_" + uid).text($next.text());
						}
						break;				
					case 13: //Enter
						if ($f.length > 0) {
							self._changeSelectbox(trgt, $f.attr("rel"), $f.text());
						}
						self._closeSelectbox(trgt);
						break;
					case 9: //Tab
						if (trgt) {
							var inst = self._getInst(trgt);
							if (inst/* && inst.isOpen*/) {
								if ($f.length > 0) {
									self._changeSelectbox(trgt, $f.attr("rel"), $f.text());
								}
								self._closeSelectbox(trgt);
							}
						}
						var i = parseInt($this.attr("tabindex"), 10);
						if (!e.shiftKey) {
							i++;
						} else {
							i--;
						}
						$("*[tabindex='" + i + "']").focus();
						break;
					case 27: //Escape
						self._closeSelectbox(trgt);
						break;
				}
				e.stopPropagation();
				return false;
			}).delegate("a", "mouseover", function (e) {
				$(this).addClass(inst.settings.classFocus);
			}).delegate("a", "mouseout", function (e) {
				$(this).removeClass(inst.settings.classFocus);	
			});
			
			sbSelector.appendTo(sbHolder);
			sbOptions.appendTo(sbHolder);			
			sbHolder.insertAfter($target);
			
			$("html").on('mousedown', function(e) {
				e.stopPropagation();          
				$("select").selectbox('close'); 
			});
			$([".", inst.settings.classHolder, ", .", inst.settings.classSelector].join("")).mousedown(function(e) {    
				e.stopPropagation();
			});
		},
		/**
		 * Remove the selectbox functionality completely. This will return the element back to its pre-init state.
		 * 
		 * @param {HTMLElement} target
		 */
		_detachSelectbox: function (target) {
			var inst = this._getInst(target);
			if (!inst) {
				return FALSE;
			}
			$("#sbHolder_" + inst.uid).remove();
			$.data(target, PROP_NAME, null);
			$(target).show();			
		},
		/**
		 * Change selected attribute of the selectbox.
		 * 
		 * @param {HTMLElement} target
		 * @param {String} value
		 * @param {String} text
		 */
		_changeSelectbox: function (target, value, text) {
			var onChange,
				inst = this._getInst(target);
			if (inst) {
				onChange = this._get(inst, 'onChange');
				$("#sbSelector_" + inst.uid).text(text);
			}
			value = value.replace(/\'/g, "\\'");
			$(target).find("option[value='" + value + "']").attr("selected", TRUE);
			if (inst && onChange) {
				onChange.apply((inst.input ? inst.input[0] : null), [value, inst]);
			} else if (inst && inst.input) {
				inst.input.trigger('change');
			}
		},
		/**
		 * Enable the selectbox.
		 * 
		 * @param {HTMLElement} target
		 */
		_enableSelectbox: function (target) {
			var inst = this._getInst(target);
			if (!inst || !inst.isDisabled) {
				return FALSE;
			}
			$("#sbHolder_" + inst.uid).removeClass(inst.settings.classHolderDisabled);
			inst.isDisabled = FALSE;
			$.data(target, PROP_NAME, inst);
		},
		/**
		 * Disable the selectbox.
		 * 
		 * @param {HTMLElement} target
		 */
		_disableSelectbox: function (target) {
			var inst = this._getInst(target);
			if (!inst || inst.isDisabled) {
				return FALSE;
			}
			$("#sbHolder_" + inst.uid).addClass(inst.settings.classHolderDisabled);
			inst.isDisabled = TRUE;
			$.data(target, PROP_NAME, inst);
		},
		/**
		 * Get or set any selectbox option. If no value is specified, will act as a getter.
		 * 
		 * @param {HTMLElement} target
		 * @param {String} name
		 * @param {Object} value
		 */
		_optionSelectbox: function (target, name, value) {
			var inst = this._getInst(target);
			if (!inst) {
				return FALSE;
			}
			//TODO check name
			inst[name] = value;
			$.data(target, PROP_NAME, inst);
		},
		/**
		 * Call up attached selectbox
		 * 
		 * @param {HTMLElement} target
		 */
		_openSelectbox: function (target) {
			var inst = this._getInst(target);
			//if (!inst || this._state[inst.uid] || inst.isDisabled) {
			if (!inst || inst.isOpen || inst.isDisabled) {
				return;
			}
			var	el = $("#sbOptions_" + inst.uid),
				viewportHeight = parseInt($(window).height(), 10),
				offset = $("#sbHolder_" + inst.uid).offset(),
				scrollTop = $(window).scrollTop(),
				height = el.prev().height(),
				diff = viewportHeight - (offset.top - scrollTop) - height / 2,
				onOpen = this._get(inst, 'onOpen');
			el.css({
				"top": height + "px",
				"maxHeight": (diff - height) + "px"
			});
			inst.settings.effect === "fade" ? el.fadeIn(inst.settings.speed) : el.slideDown(inst.settings.speed);
			$("#sbToggle_" + inst.uid).addClass(inst.settings.classToggleOpen);
			this._state[inst.uid] = TRUE;
			inst.isOpen = TRUE;
			if (onOpen) {
				onOpen.apply((inst.input ? inst.input[0] : null), [inst]);
			}
			$.data(target, PROP_NAME, inst);
		},
		/**
		 * Close opened selectbox
		 * 
		 * @param {HTMLElement} target
		 */
		_closeSelectbox: function (target) {
			var inst = this._getInst(target);
			//if (!inst || !this._state[inst.uid]) {
			if (!inst || !inst.isOpen) {
				return;
			}
			var onClose = this._get(inst, 'onClose');
			inst.settings.effect === "fade" ? $("#sbOptions_" + inst.uid).fadeOut(inst.settings.speed) : $("#sbOptions_" + inst.uid).slideUp(inst.settings.speed);
			$("#sbToggle_" + inst.uid).removeClass(inst.settings.classToggleOpen);
			this._state[inst.uid] = FALSE;
			inst.isOpen = FALSE;
			if (onClose) {
				onClose.apply((inst.input ? inst.input[0] : null), [inst]);
			}
			$.data(target, PROP_NAME, inst);
		},
		/**
		 * Create a new instance object
		 * 
		 * @param {HTMLElement} target
		 * @return {Object}
		 */
		_newInst: function(target) {
			var id = target[0].id.replace(/([^A-Za-z0-9_-])/g, '\\\\$1');
			return {
				id: id, 
				input: target, 
				uid: Math.floor(Math.random() * 99999999),
				isOpen: FALSE,
				isDisabled: FALSE,
				settings: {}
			}; 
		},
		/**
		 * Retrieve the instance data for the target control.
		 * 
		 * @param {HTMLElement} target
		 * @return {Object} - the associated instance data
		 * @throws error if a jQuery problem getting data
		 */
		_getInst: function(target) {
			try {
				return $.data(target, PROP_NAME);
			}
			catch (err) {
				throw 'Missing instance data for this selectbox';
			}
		},
		/**
		 * Get a setting value, defaulting if necessary
		 * 
		 * @param {Object} inst
		 * @param {String} name
		 * @return {Mixed}
		 */
		_get: function(inst, name) {
			return inst.settings[name] !== undefined ? inst.settings[name] : this._defaults[name];
		}
	});

	/**
	 * Invoke the selectbox functionality.
	 * 
	 * @param {Object|String} options
	 * @return {Object}
	 */
	$.fn.selectbox = function (options) {
		
		var otherArgs = Array.prototype.slice.call(arguments, 1);
		if (typeof options == 'string' && options == 'isDisabled') {
			return $.selectbox['_' + options + 'Selectbox'].apply($.selectbox, [this[0]].concat(otherArgs));
		}
		
		if (options == 'option' && arguments.length == 2 && typeof arguments[1] == 'string') {
			return $.selectbox['_' + options + 'Selectbox'].apply($.selectbox, [this[0]].concat(otherArgs));
		}
		//_customDisabledSelectbox
		return this.each(function() {
			typeof options == 'string' ?
				$.selectbox['_' + options + 'Selectbox'].apply($.selectbox, [this].concat(otherArgs)) :
				$.selectbox._attachSelectbox(this, options);
		});
	};
	
            $.selectbox = new Selectbox(); // singleton instance
            $.selectbox.version = "0.2";
        })(jQuery);

        //            var BASE_URL = 'http://localhost/school_lms/public';    
//                $.ajax({
//                type: 'POST',
//                url: BASE_URL+'/user/openregisterpopupexternal',
//                dataType: 'html',
//                success: function(data) {
//
//                    $("#exampleModalRegisterPopUp").css('display','none');
                    $("#exampleModalRegisterPopUp").modal('hide');
                    $("#exampleModalRegisterPopUp").hide();
                    $("#exampleModalRegisterPopUp").html("");
//
                    $("#vikash_css_1").attr("disabled","disabled");
                    $("#vikash_css_2").attr("disabled","disabled");
                    $("#vikash_css_3").attr("disabled","disabled");
//
//                }   
//             });
            $(".modal-backdrop").hide();
        });
        
        $("#school_email_dd").hide();
        var selectedOption = $("#boardChild").find(":selected").text();

        $("#boardChild").next(".holders").text(selectedOption);
        var selectedOption = $("#classChild").find(":selected").text();

        $("#classChild").next(".holders").text(selectedOption);

        $("#boardChild").change(function() {
            var optionString = '<option value="">Select Class</option>';
            $("#classChild").html(optionString);
            $("#otherboardChildclass").hide();
            if (($("#boardChild :selected").text()) == "Other") {
                $("#otherboardChildclass").show();
            }
            $("#classChild").parent().find(".holders").text("");
            $("#classChild").parent().find(".holders").text("Select Class");
            if ($(this).val()) {
                $.ajax({type: 'POST',
                    url: BASE_URL + "/lms/index/containerlist/" + $(this).val(),
                    dataType: 'json',
                    success: function(data) {
                        var optionString = '<option value="">Select Class</option>';
                        $("#classChild").html(optionString);

                        $.each(data.options, function(key, obj)
                        {
                            optionString += '<option value="' + obj.rack_id + '">' + obj.rack_name + '</option>';

                        })
                        $("#classChild").html(optionString);

                    }
                });
            }

        });

        
        $("#ucountriesChild").change(function() {
            $("#stateChild").parent().find(".holders").text("");
            $("#stateChild").parent().find(".holders").text("Select a state");
            var countryid = $("#ucountriesChild").val();
            $.ajax({
                type: 'POST',
                url: BASE_URL + '/user/getstates',
                data: {countryid: countryid},
                success: function(data) {
                    $("#stateChild").html(data.statenames);
                }
            });
        });

    });


    $("#phonecode").change(function() {
        var selectedPhoneCode = $("#phonecode option:selected").text();
        var selectedPhoneCodeArr = selectedPhoneCode.split(" ");
        $('select option:contains(' + selectedPhoneCode + ')').text(selectedPhoneCodeArr[0]);
    });

    $('.select').selectbox();
			
    $(".CostomSelect").each(function(){
        $(this).wrap("<span class='select-wrapper'></span>");
        $(this).after("<span class='holder'></span>");
    });
    $(".CostomSelect").change(function(){
        var selectedOption = $(this).find(":selected").text();
        $(this).next(".holder").text(selectedOption);
    }).trigger('change');
    
    $("#phonecode_msdd").click(function(){
        $("#phonecode_child").css({height: 'auto'});
    });
</script>   
        
    <?php
    echo $this->zfcUserRegisterWidget( array('source' => $source ,
                                            'referer' => $referer ,
                                            'current_page' => $current_page ,
                                            'registration_plugin_base_path' => $registration_plugin_base_path,
                                            'boardList' => $boardListArr ,
                                            'countryData' => $countryListArr) ); 
    die;
}
?>     